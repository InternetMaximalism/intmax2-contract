import { z } from 'zod';
export declare const DeployedContractsSchema: z.ZodObject<{
    mockL1ScrollMessenger: z.ZodOptional<z.ZodString>;
    mockL2ScrollMessenger: z.ZodOptional<z.ZodString>;
    l1Contribution: z.ZodOptional<z.ZodString>;
    l2Contribution: z.ZodOptional<z.ZodString>;
    testErc20: z.ZodOptional<z.ZodString>;
    withdrawalPlonkVerifier: z.ZodOptional<z.ZodString>;
    claimPlonkVerifier: z.ZodOptional<z.ZodString>;
    rollup: z.ZodOptional<z.ZodString>;
    withdrawal: z.ZodOptional<z.ZodString>;
    claim: z.ZodOptional<z.ZodString>;
    blockBuilderRegistry: z.ZodOptional<z.ZodString>;
    liquidity: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    withdrawal?: string | undefined;
    rollup?: string | undefined;
    mockL1ScrollMessenger?: string | undefined;
    mockL2ScrollMessenger?: string | undefined;
    l1Contribution?: string | undefined;
    l2Contribution?: string | undefined;
    testErc20?: string | undefined;
    withdrawalPlonkVerifier?: string | undefined;
    claimPlonkVerifier?: string | undefined;
    claim?: string | undefined;
    blockBuilderRegistry?: string | undefined;
    liquidity?: string | undefined;
}, {
    withdrawal?: string | undefined;
    rollup?: string | undefined;
    mockL1ScrollMessenger?: string | undefined;
    mockL2ScrollMessenger?: string | undefined;
    l1Contribution?: string | undefined;
    l2Contribution?: string | undefined;
    testErc20?: string | undefined;
    withdrawalPlonkVerifier?: string | undefined;
    claimPlonkVerifier?: string | undefined;
    claim?: string | undefined;
    blockBuilderRegistry?: string | undefined;
    liquidity?: string | undefined;
}>;
export type DeployedContracts = z.infer<typeof DeployedContractsSchema>;
