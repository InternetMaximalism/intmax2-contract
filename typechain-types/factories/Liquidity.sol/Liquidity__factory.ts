/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  Liquidity,
  LiquidityInterface,
} from "../../Liquidity.sol/Liquidity";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "scrollMessenger",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "recipient",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint64",
        name: "depositIndex",
        type: "uint64",
      },
      {
        indexed: false,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint32",
        name: "tokenIndex",
        type: "uint32",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Deposited",
    type: "event",
  },
  {
    inputs: [],
    name: "_depositCounter",
    outputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "_greeting",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "_rollupContract",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "_scrollMessenger",
    outputs: [
      {
        internalType: "contract IScrollMessenger",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "recipient",
        type: "bytes32",
      },
      {
        internalType: "uint32",
        name: "tokenIndex",
        type: "uint32",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "deposit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "deposits",
    outputs: [
      {
        internalType: "bytes32",
        name: "recipient",
        type: "bytes32",
      },
      {
        internalType: "uint32",
        name: "tokenIndex",
        type: "uint32",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "rollupContract",
        type: "address",
      },
    ],
    name: "updateRollupContract",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405260016000806101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555034801561003957600080fd5b50604051610b06380380610b06833981810160405281019061005b9190610105565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610132565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100d2826100a7565b9050919050565b6100e2816100c7565b81146100ed57600080fd5b50565b6000815190506100ff816100d9565b92915050565b60006020828403121561011b5761011a6100a2565b5b6000610129848285016100f0565b91505092915050565b6109c5806101416000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063aa8fc35b1161005b578063aa8fc35b146100da578063b02c43d0146100f8578063dedd8ed51461012a578063f3b4f1c9146101465761007d565b806308c5ca5c146100825780636a49c47d1461009e578063a70344be146100bc575b600080fd5b61009c600480360381019061009791906104c6565b610164565b005b6100a66101a8565b6040516100b39190610502565b60405180910390f35b6100c46101ce565b6040516100d19190610540565b60405180910390f35b6100e26101e6565b6040516100ef91906105ba565b60405180910390f35b610112600480360381019061010d919061060b565b61020c565b6040516101219392919061067f565b60405180910390f35b610144600480360381019061013f919061070e565b610246565b005b61014e6103d5565b60405161015b91906107f1565b60405180910390f35b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900467ffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60016020528060005260406000206000915090508060000154908060010160009054906101000a900463ffffffff16908060020154905083565b67ffffffffffffffff801660008054906101000a900467ffffffffffffffff1667ffffffffffffffff16036102b0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102a79061085f565b60405180910390fd5b60008060009054906101000a900467ffffffffffffffff16905060016000808282829054906101000a900467ffffffffffffffff166102ef91906108ae565b92506101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060405180606001604052808581526020018463ffffffff16815260200183815250600160008367ffffffffffffffff1681526020019081526020016000206000820151816000015560208201518160010160006101000a81548163ffffffff021916908363ffffffff16021790555060408201518160020155905050837fc1617bc4d3903289f4b5ba712d4f52cf520653227e0db8a358e462296f2da587823386866040516103c794939291906108ea565b60405180910390a250505050565b600480546103e29061095e565b80601f016020809104026020016040519081016040528092919081815260200182805461040e9061095e565b801561045b5780601f106104305761010080835404028352916020019161045b565b820191906000526020600020905b81548152906001019060200180831161043e57829003601f168201915b505050505081565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061049382610468565b9050919050565b6104a381610488565b81146104ae57600080fd5b50565b6000813590506104c08161049a565b92915050565b6000602082840312156104dc576104db610463565b5b60006104ea848285016104b1565b91505092915050565b6104fc81610488565b82525050565b600060208201905061051760008301846104f3565b92915050565b600067ffffffffffffffff82169050919050565b61053a8161051d565b82525050565b60006020820190506105556000830184610531565b92915050565b6000819050919050565b600061058061057b61057684610468565b61055b565b610468565b9050919050565b600061059282610565565b9050919050565b60006105a482610587565b9050919050565b6105b481610599565b82525050565b60006020820190506105cf60008301846105ab565b92915050565b6000819050919050565b6105e8816105d5565b81146105f357600080fd5b50565b600081359050610605816105df565b92915050565b60006020828403121561062157610620610463565b5b600061062f848285016105f6565b91505092915050565b6000819050919050565b61064b81610638565b82525050565b600063ffffffff82169050919050565b61066a81610651565b82525050565b610679816105d5565b82525050565b60006060820190506106946000830186610642565b6106a16020830185610661565b6106ae6040830184610670565b949350505050565b6106bf81610638565b81146106ca57600080fd5b50565b6000813590506106dc816106b6565b92915050565b6106eb81610651565b81146106f657600080fd5b50565b600081359050610708816106e2565b92915050565b60008060006060848603121561072757610726610463565b5b6000610735868287016106cd565b9350506020610746868287016106f9565b9250506040610757868287016105f6565b9150509250925092565b600081519050919050565b600082825260208201905092915050565b60005b8381101561079b578082015181840152602081019050610780565b60008484015250505050565b6000601f19601f8301169050919050565b60006107c382610761565b6107cd818561076c565b93506107dd81856020860161077d565b6107e6816107a7565b840191505092915050565b6000602082019050818103600083015261080b81846107b8565b905092915050565b7f4465706f73697420636f756e746572206f766572666c6f770000000000000000600082015250565b600061084960188361076c565b915061085482610813565b602082019050919050565b600060208201905081810360008301526108788161083c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006108b98261051d565b91506108c48361051d565b9250828201905067ffffffffffffffff8111156108e4576108e361087f565b5b92915050565b60006080820190506108ff6000830187610531565b61090c60208301866104f3565b6109196040830185610661565b6109266060830184610670565b95945050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061097657607f821691505b6020821081036109895761098861092f565b5b5091905056fea2646970667358221220aeb5867b457b5666a0e07285686cc7b04d5915c48c54b323aef59e1bc79f240f64736f6c63430008140033";

type LiquidityConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LiquidityConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Liquidity__factory extends ContractFactory {
  constructor(...args: LiquidityConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    scrollMessenger: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Liquidity> {
    return super.deploy(scrollMessenger, overrides || {}) as Promise<Liquidity>;
  }
  override getDeployTransaction(
    scrollMessenger: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(scrollMessenger, overrides || {});
  }
  override attach(address: string): Liquidity {
    return super.attach(address) as Liquidity;
  }
  override connect(signer: Signer): Liquidity__factory {
    return super.connect(signer) as Liquidity__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LiquidityInterface {
    return new utils.Interface(_abi) as LiquidityInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Liquidity {
    return new Contract(address, _abi, signerOrProvider) as Liquidity;
  }
}
