/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { Liquidity, LiquidityInterface } from "../Liquidity";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "scrollMessenger",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "recipient",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "uint64",
        name: "depositIndex",
        type: "uint64",
      },
      {
        indexed: false,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint32",
        name: "tokenIndex",
        type: "uint32",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Deposited",
    type: "event",
  },
  {
    inputs: [],
    name: "_rollupContract",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "_scrollMessenger",
    outputs: [
      {
        internalType: "contract IScrollMessenger",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "recipient",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "depositERC20",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "recipient",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "depositERC721",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "recipient",
        type: "bytes32",
      },
    ],
    name: "depositETH",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint64",
        name: "depositIndex",
        type: "uint64",
      },
    ],
    name: "getDeposit",
    outputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "recipient",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "uint32",
            name: "tokenIndex",
            type: "uint32",
          },
          {
            internalType: "bool",
            name: "isRejected",
            type: "bool",
          },
          {
            internalType: "uint256",
            name: "requestedAt",
            type: "uint256",
          },
        ],
        internalType: "struct ILiquidity.DepositData",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getDepositCounter",
    outputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getLastProcessedDepositIndex",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getLastSeenDepositIndex",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "lastSeenDepositIndex",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "rejectedIndices",
        type: "uint256[]",
      },
    ],
    name: "rejectDeposits",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "submitDepositRoot",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newRollupContract",
        type: "address",
      },
    ],
    name: "updateRollupContract",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405260016000806101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055503480156200003a57600080fd5b506040516200124f3803806200124f833981810160405281019062000060919062000176565b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000806000604051602001620000b992919062000227565b60405160208183030381529060405280519060200120905060006008600083815260200190815260200160002060006101000a81548163ffffffff021916908363ffffffff160217905550505062000257565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200013e8262000111565b9050919050565b620001508162000131565b81146200015c57600080fd5b50565b600081519050620001708162000145565b92915050565b6000602082840312156200018f576200018e6200010c565b5b60006200019f848285016200015f565b91505092915050565b60008160601b9050919050565b6000620001c282620001a8565b9050919050565b6000620001d682620001b5565b9050919050565b620001f2620001ec8262000131565b620001c9565b82525050565b6000819050919050565b6000819050919050565b620002216200021b82620001f8565b62000202565b82525050565b6000620002358285620001dd565b6014820191506200024782846200020c565b6020820191508190509392505050565b610fe880620002676000396000f3fe6080604052600436106100a75760003560e01c8063beb1e04111610064578063beb1e041146101aa578063c108bb40146101d5578063cebf3251146101fe578063d28906c914610227578063d68d9d4e14610252578063d92b998a1461026e576100a7565b806308c5ca5c146100ac578063107ef267146100d55780633bbb787a146101005780636a49c47d14610117578063aa8fc35b14610142578063ae59a6b21461016d575b600080fd5b3480156100b857600080fd5b506100d360048036038101906100ce91906108bf565b610297565b005b3480156100e157600080fd5b506100ea6102db565b6040516100f79190610905565b60405180910390f35b34801561010c57600080fd5b506101156102e5565b005b34801561012357600080fd5b5061012c6102e7565b604051610139919061092f565b60405180910390f35b34801561014e57600080fd5b5061015761030d565b60405161016491906109a9565b60405180910390f35b34801561017957600080fd5b50610194600480360381019061018f9190610a04565b610333565b6040516101a19190610afb565b60405180910390f35b3480156101b657600080fd5b506101bf6103c9565b6040516101cc9190610905565b60405180910390f35b3480156101e157600080fd5b506101fc60048036038101906101f79190610b6e565b6103d3565b005b34801561020a57600080fd5b5061022560048036038101906102209190610bc1565b6103f3565b005b34801561023357600080fd5b5061023c610413565b6040516102499190610c37565b60405180910390f35b61026c60048036038101906102679190610c52565b610430565b005b34801561027a57600080fd5b5061029560048036038101906102909190610ce4565b61043f565b005b80600360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600554905090565b565b600360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61033b61081d565b600160008367ffffffffffffffff1681526020019081526020016000206040518060a001604052908160008201548152602001600182015481526020016002820160009054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016002820160049054906101000a900460ff161515151581526020016003820154815250509050919050565b6000600454905090565b60006103e08360006104b4565b90506103ed848284610619565b50505050565b60006103ff84846104b4565b905061040c858284610619565b5050505050565b60008060009054906101000a900467ffffffffffffffff16905090565b61043c81600034610619565b50565b8260048190555060005b828290508110156104ae57600180600085858581811061046c5761046b610d44565b5b90506020020135815260200190815260200160002060020160046101000a81548160ff02191690831515021790555080806104a690610da2565b915050610449565b50505050565b6000806104c184846107ea565b905060006008600083815260200190815260200160002060009054906101000a900463ffffffff1663ffffffff16036105ec576001600660008282546105079190610dea565b925050819055506006546008600083815260200190815260200160002060006101000a81548163ffffffff021916908363ffffffff160217905550600760405180604001604052808673ffffffffffffffffffffffffffffffffffffffff16815260200185815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015550505b6008600082815260200190815260200160002060009054906101000a900463ffffffff1691505092915050565b67ffffffffffffffff801660008054906101000a900467ffffffffffffffff1667ffffffffffffffff1603610683576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067a90610e7b565b60405180910390fd5b60008060009054906101000a900467ffffffffffffffff16905060016000808282829054906101000a900467ffffffffffffffff166106c29190610e9b565b92506101000a81548167ffffffffffffffff021916908367ffffffffffffffff1602179055506040518060a001604052808581526020018381526020018463ffffffff16815260200160001515815260200142815250600160008367ffffffffffffffff168152602001908152602001600020600082015181600001556020820151816001015560408201518160020160006101000a81548163ffffffff021916908363ffffffff16021790555060608201518160020160046101000a81548160ff021916908315150217905550608082015181600301559050508067ffffffffffffffff16847fc1617bc4d3903289f4b5ba712d4f52cf520653227e0db8a358e462296f2da5873386866040516107dc93929190610ee6565b60405180910390a350505050565b600082826040516020016107ff929190610f86565b60405160208183030381529060405280519060200120905092915050565b6040518060a001604052806000801916815260200160008152602001600063ffffffff168152602001600015158152602001600081525090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061088c82610861565b9050919050565b61089c81610881565b81146108a757600080fd5b50565b6000813590506108b981610893565b92915050565b6000602082840312156108d5576108d4610857565b5b60006108e3848285016108aa565b91505092915050565b6000819050919050565b6108ff816108ec565b82525050565b600060208201905061091a60008301846108f6565b92915050565b61092981610881565b82525050565b60006020820190506109446000830184610920565b92915050565b6000819050919050565b600061096f61096a61096584610861565b61094a565b610861565b9050919050565b600061098182610954565b9050919050565b600061099382610976565b9050919050565b6109a381610988565b82525050565b60006020820190506109be600083018461099a565b92915050565b600067ffffffffffffffff82169050919050565b6109e1816109c4565b81146109ec57600080fd5b50565b6000813590506109fe816109d8565b92915050565b600060208284031215610a1a57610a19610857565b5b6000610a28848285016109ef565b91505092915050565b6000819050919050565b610a4481610a31565b82525050565b610a53816108ec565b82525050565b600063ffffffff82169050919050565b610a7281610a59565b82525050565b60008115159050919050565b610a8d81610a78565b82525050565b60a082016000820151610aa96000850182610a3b565b506020820151610abc6020850182610a4a565b506040820151610acf6040850182610a69565b506060820151610ae26060850182610a84565b506080820151610af56080850182610a4a565b50505050565b600060a082019050610b106000830184610a93565b92915050565b610b1f81610a31565b8114610b2a57600080fd5b50565b600081359050610b3c81610b16565b92915050565b610b4b816108ec565b8114610b5657600080fd5b50565b600081359050610b6881610b42565b92915050565b600080600060608486031215610b8757610b86610857565b5b6000610b9586828701610b2d565b9350506020610ba6868287016108aa565b9250506040610bb786828701610b59565b9150509250925092565b60008060008060808587031215610bdb57610bda610857565b5b6000610be987828801610b2d565b9450506020610bfa878288016108aa565b9350506040610c0b87828801610b59565b9250506060610c1c87828801610b59565b91505092959194509250565b610c31816109c4565b82525050565b6000602082019050610c4c6000830184610c28565b92915050565b600060208284031215610c6857610c67610857565b5b6000610c7684828501610b2d565b91505092915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610ca457610ca3610c7f565b5b8235905067ffffffffffffffff811115610cc157610cc0610c84565b5b602083019150836020820283011115610cdd57610cdc610c89565b5b9250929050565b600080600060408486031215610cfd57610cfc610857565b5b6000610d0b86828701610b59565b935050602084013567ffffffffffffffff811115610d2c57610d2b61085c565b5b610d3886828701610c8e565b92509250509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610dad826108ec565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610ddf57610dde610d73565b5b600182019050919050565b6000610df5826108ec565b9150610e00836108ec565b9250828201905080821115610e1857610e17610d73565b5b92915050565b600082825260208201905092915050565b7f4465706f73697420636f756e746572206f766572666c6f770000000000000000600082015250565b6000610e65601883610e1e565b9150610e7082610e2f565b602082019050919050565b60006020820190508181036000830152610e9481610e58565b9050919050565b6000610ea6826109c4565b9150610eb1836109c4565b9250828201905067ffffffffffffffff811115610ed157610ed0610d73565b5b92915050565b610ee081610a59565b82525050565b6000606082019050610efb6000830186610920565b610f086020830185610ed7565b610f1560408301846108f6565b949350505050565b60008160601b9050919050565b6000610f3582610f1d565b9050919050565b6000610f4782610f2a565b9050919050565b610f5f610f5a82610881565b610f3c565b82525050565b6000819050919050565b610f80610f7b826108ec565b610f65565b82525050565b6000610f928285610f4e565b601482019150610fa28284610f6f565b602082019150819050939250505056fea2646970667358221220b9c226fc08faa31f135a80fafe7d4c1ba8da2f304b2615953d5d9b846c19375264736f6c63430008140033";

type LiquidityConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LiquidityConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Liquidity__factory extends ContractFactory {
  constructor(...args: LiquidityConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    scrollMessenger: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Liquidity> {
    return super.deploy(scrollMessenger, overrides || {}) as Promise<Liquidity>;
  }
  override getDeployTransaction(
    scrollMessenger: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(scrollMessenger, overrides || {});
  }
  override attach(address: string): Liquidity {
    return super.attach(address) as Liquidity;
  }
  override connect(signer: Signer): Liquidity__factory {
    return super.connect(signer) as Liquidity__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LiquidityInterface {
    return new utils.Interface(_abi) as LiquidityInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Liquidity {
    return new Contract(address, _abi, signerOrProvider) as Liquidity;
  }
}
