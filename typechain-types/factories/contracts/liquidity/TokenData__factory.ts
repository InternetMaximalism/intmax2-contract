/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  TokenData,
  TokenDataInterface,
} from "../../../contracts/liquidity/TokenData";

const _abi = [
  {
    inputs: [],
    name: "InvalidInitialization",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidTokenAddress",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidTokenInfo",
    type: "error",
  },
  {
    inputs: [],
    name: "NotInitializing",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint64",
        name: "version",
        type: "uint64",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_usdc",
        type: "address",
      },
      {
        internalType: "address",
        name: "_wbtc",
        type: "address",
      },
    ],
    name: "__TokenInfo_init",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610598806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063a7f3084f14610030575b600080fd5b61004a60048036038101906100459190610486565b61004c565b005b610054610082565b61006160008060006100c2565b5061006f60018360006100c2565b5061007d60018260006100c2565b505050565b61008a6103db565b6100c0576040517fd7e6bcf800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b600080600054905060016000808282546100dc91906104ff565b925050819055506001604051806060016040528087600381111561010357610102610533565b5b81526020018673ffffffffffffffffffffffffffffffffffffffff16815260200185815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000160006101000a81548160ff0219169083600381111561017c5761017b610533565b5b021790555060208201518160000160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604082015181600101555050600060038111156101e8576101e7610533565b5b8560038111156101fb576101fa610533565b5b036102675780600260008073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548163ffffffff021916908363ffffffff160217905550809150506103d4565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036102cd576040517f1eb00b0600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600160038111156102e1576102e0610533565b5b8560038111156102f4576102f3610533565b5b036103605780600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548163ffffffff021916908363ffffffff160217905550809150506103d4565b80600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002060006101000a81548163ffffffff021916908363ffffffff160217905550809150505b9392505050565b60006103e56103fb565b60000160089054906101000a900460ff16905090565b60007ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061045382610428565b9050919050565b61046381610448565b811461046e57600080fd5b50565b6000813590506104808161045a565b92915050565b6000806040838503121561049d5761049c610423565b5b60006104ab85828601610471565b92505060206104bc85828601610471565b9150509250929050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061050a826104c6565b9150610515836104c6565b925082820190508082111561052d5761052c6104d0565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fdfea26469706673582212203cabf8ecc0e96dc0060e88b801a52594a1cea91eebaa6d5fb7c5383be7bfeda564736f6c63430008180033";

type TokenDataConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TokenDataConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TokenData__factory extends ContractFactory {
  constructor(...args: TokenDataConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      TokenData & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): TokenData__factory {
    return super.connect(runner) as TokenData__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TokenDataInterface {
    return new Interface(_abi) as TokenDataInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): TokenData {
    return new Contract(address, _abi, runner) as unknown as TokenData;
  }
}
