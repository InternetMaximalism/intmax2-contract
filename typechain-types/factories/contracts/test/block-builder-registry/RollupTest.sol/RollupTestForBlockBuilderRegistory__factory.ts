/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../../common";
import type {
  RollupTestForBlockBuilderRegistory,
  RollupTestForBlockBuilderRegistoryInterface,
} from "../../../../../contracts/test/block-builder-registry/RollupTest.sol/RollupTestForBlockBuilderRegistory";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "getBlockHashAndBuilder",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_hash",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "_address",
        type: "address",
      },
    ],
    name: "setTestData",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506102bf806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80638db07d5d1461003b578063e5b4668e14610057575b600080fd5b6100556004803603810190610050919061019f565b610088565b005b610071600480360381019061006c9190610215565b6100d4565b60405161007f929190610260565b60405180910390f35b8160008190555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b600080600054600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1691509150915091565b600080fd5b6000819050919050565b61011e8161010b565b811461012957600080fd5b50565b60008135905061013b81610115565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061016c82610141565b9050919050565b61017c81610161565b811461018757600080fd5b50565b60008135905061019981610173565b92915050565b600080604083850312156101b6576101b5610106565b5b60006101c48582860161012c565b92505060206101d58582860161018a565b9150509250929050565b6000819050919050565b6101f2816101df565b81146101fd57600080fd5b50565b60008135905061020f816101e9565b92915050565b60006020828403121561022b5761022a610106565b5b600061023984828501610200565b91505092915050565b61024b8161010b565b82525050565b61025a81610161565b82525050565b60006040820190506102756000830185610242565b6102826020830184610251565b939250505056fea2646970667358221220a66762a7598d7dda3402034a00f148f525f7d4ddb3516ad3e1ed7d1540a11bbf64736f6c63430008180033";

type RollupTestForBlockBuilderRegistoryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RollupTestForBlockBuilderRegistoryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RollupTestForBlockBuilderRegistory__factory extends ContractFactory {
  constructor(...args: RollupTestForBlockBuilderRegistoryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      RollupTestForBlockBuilderRegistory & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): RollupTestForBlockBuilderRegistory__factory {
    return super.connect(runner) as RollupTestForBlockBuilderRegistory__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RollupTestForBlockBuilderRegistoryInterface {
    return new Interface(_abi) as RollupTestForBlockBuilderRegistoryInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): RollupTestForBlockBuilderRegistory {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as RollupTestForBlockBuilderRegistory;
  }
}
