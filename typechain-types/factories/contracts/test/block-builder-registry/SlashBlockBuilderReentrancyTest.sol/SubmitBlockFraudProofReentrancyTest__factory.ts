/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../../../common";
import type {
  SubmitBlockFraudProofReentrancyTest,
  SubmitBlockFraudProofReentrancyTestInterface,
} from "../../../../../contracts/test/block-builder-registry/SlashBlockBuilderReentrancyTest.sol/SubmitBlockFraudProofReentrancyTest";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_blockBuilderRegistry",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "blockHash",
            type: "bytes32",
          },
          {
            internalType: "uint32",
            name: "blockNumber",
            type: "uint32",
          },
          {
            internalType: "address",
            name: "challenger",
            type: "address",
          },
        ],
        internalType: "struct FraudProofPublicInputsLib.FraudProofPublicInputs",
        name: "publicInputs",
        type: "tuple",
      },
      {
        internalType: "bytes",
        name: "proof",
        type: "bytes",
      },
    ],
    name: "submitBlockFraudProof",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x60a060405234801561001057600080fd5b5060405161093e38038061093e833981810160405281019061003291906100cf565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050506100fc565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061009c82610071565b9050919050565b6100ac81610091565b81146100b757600080fd5b50565b6000815190506100c9816100a3565b92915050565b6000602082840312156100e5576100e461006c565b5b60006100f3848285016100ba565b91505092915050565b60805161082061011e6000396000818161024201526102fb01526108206000f3fe6080604052600436106100225760003560e01c80630cffc39c146102d0576102cb565b366102cb57600060405180606001604052807f8c835aff939ed6e3ef18dc601bc14623bae8527486ad0539e41a9083e25329be60001b8152602001600563ffffffff1681526020013073ffffffffffffffffffffffffffffffffffffffff1681525090506000600567ffffffffffffffff8111156100a3576100a261038d565b5b6040519080825280601f01601f1916602001820160405280156100d55781602001600182028036833780820191505090505b509050600160f81b816000815181106100f1576100f06103bc565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600260f81b81600181518110610139576101386103bc565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600360f81b81600281518110610181576101806103bc565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600460f81b816003815181106101c9576101c86103bc565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600560f81b81600481518110610211576102106103bc565b5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16630cffc39c83836040518363ffffffff1660e01b815260040161029b929190610536565b600060405180830381600087803b1580156102b557600080fd5b505af11580156102c9573d6000803e3d6000fd5b005b600080fd5b3480156102dc57600080fd5b506102f760048036038101906102f291906105f9565b6102f9565b005b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16630cffc39c8484846040518463ffffffff1660e01b8152600401610356939291906107b8565b600060405180830381600087803b15801561037057600080fd5b505af1158015610384573d6000803e3d6000fd5b50505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000819050919050565b6103fe816103eb565b82525050565b600063ffffffff82169050919050565b61041d81610404565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061044e82610423565b9050919050565b61045e81610443565b82525050565b60608201600082015161047a60008501826103f5565b50602082015161048d6020850182610414565b5060408201516104a06040850182610455565b50505050565b600081519050919050565b600082825260208201905092915050565b60005b838110156104e05780820151818401526020810190506104c5565b60008484015250505050565b6000601f19601f8301169050919050565b6000610508826104a6565b61051281856104b1565b93506105228185602086016104c2565b61052b816104ec565b840191505092915050565b600060808201905061054b6000830185610464565b818103606083015261055d81846104fd565b90509392505050565b600080fd5b600080fd5b600080fd5b60006060828403121561058b5761058a610570565b5b81905092915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126105b9576105b8610594565b5b8235905067ffffffffffffffff8111156105d6576105d5610599565b5b6020830191508360018202830111156105f2576105f161059e565b5b9250929050565b60008060006080848603121561061257610611610566565b5b600061062086828701610575565b935050606084013567ffffffffffffffff8111156106415761064061056b565b5b61064d868287016105a3565b92509250509250925092565b610662816103eb565b811461066d57600080fd5b50565b60008135905061067f81610659565b92915050565b60006106946020840184610670565b905092915050565b6106a581610404565b81146106b057600080fd5b50565b6000813590506106c28161069c565b92915050565b60006106d760208401846106b3565b905092915050565b6106e881610443565b81146106f357600080fd5b50565b600081359050610705816106df565b92915050565b600061071a60208401846106f6565b905092915050565b606082016107336000830183610685565b61074060008501826103f5565b5061074e60208301836106c8565b61075b6020850182610414565b50610769604083018361070b565b6107766040850182610455565b50505050565b82818337600083830152505050565b600061079783856104b1565b93506107a483858461077c565b6107ad836104ec565b840190509392505050565b60006080820190506107cd6000830186610722565b81810360608301526107e081848661078b565b905094935050505056fea2646970667358221220fba67eadcb1e5dd36dd8b6f7d5a4119ec2ec489391cff554a7630a6afc67f02064736f6c63430008180033";

type SubmitBlockFraudProofReentrancyTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SubmitBlockFraudProofReentrancyTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SubmitBlockFraudProofReentrancyTest__factory extends ContractFactory {
  constructor(...args: SubmitBlockFraudProofReentrancyTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _blockBuilderRegistry: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_blockBuilderRegistry, overrides || {});
  }
  override deploy(
    _blockBuilderRegistry: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_blockBuilderRegistry, overrides || {}) as Promise<
      SubmitBlockFraudProofReentrancyTest & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): SubmitBlockFraudProofReentrancyTest__factory {
    return super.connect(
      runner
    ) as SubmitBlockFraudProofReentrancyTest__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SubmitBlockFraudProofReentrancyTestInterface {
    return new Interface(_abi) as SubmitBlockFraudProofReentrancyTestInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): SubmitBlockFraudProofReentrancyTest {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as SubmitBlockFraudProofReentrancyTest;
  }
}
