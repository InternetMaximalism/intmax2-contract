/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  MockPlonkVerifier,
  MockPlonkVerifierInterface,
} from "../../../contracts/test/MockPlonkVerifier";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    name: "Verify",
    outputs: [
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610220806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80637e4f7a8a14610030575b600080fd5b61004a60048036038101906100459190610133565b610060565b60405161005791906101cf565b60405180910390f35b600060019050949350505050565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f84011261009d5761009c610078565b5b8235905067ffffffffffffffff8111156100ba576100b961007d565b5b6020830191508360018202830111156100d6576100d5610082565b5b9250929050565b60008083601f8401126100f3576100f2610078565b5b8235905067ffffffffffffffff8111156101105761010f61007d565b5b60208301915083602082028301111561012c5761012b610082565b5b9250929050565b6000806000806040858703121561014d5761014c61006e565b5b600085013567ffffffffffffffff81111561016b5761016a610073565b5b61017787828801610087565b9450945050602085013567ffffffffffffffff81111561019a57610199610073565b5b6101a6878288016100dd565b925092505092959194509250565b60008115159050919050565b6101c9816101b4565b82525050565b60006020820190506101e460008301846101c0565b9291505056fea2646970667358221220671b22b8a892ece51e1fbe0e7ce43892f34049af03c94a8cd2507625c35660dd64736f6c63430008180033";

type MockPlonkVerifierConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockPlonkVerifierConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockPlonkVerifier__factory extends ContractFactory {
  constructor(...args: MockPlonkVerifierConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      MockPlonkVerifier & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MockPlonkVerifier__factory {
    return super.connect(runner) as MockPlonkVerifier__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockPlonkVerifierInterface {
    return new Interface(_abi) as MockPlonkVerifierInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MockPlonkVerifier {
    return new Contract(address, _abi, runner) as unknown as MockPlonkVerifier;
  }
}
