/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  MockPlonkVerifier,
  MockPlonkVerifierInterface,
} from "../../../contracts/test/MockPlonkVerifier";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    name: "Verify",
    outputs: [
      {
        internalType: "bool",
        name: "success",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "_result",
        type: "bool",
      },
    ],
    name: "setResult",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405260016000806101000a81548160ff02191690831515021790555034801561002a57600080fd5b506102c98061003a6000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80637e4f7a8a1461003b578063f4b4dc2e1461006b575b600080fd5b61005560048036038101906100509190610183565b610087565b604051610062919061021f565b60405180910390f35b61008560048036038101906100809190610266565b6100a2565b005b60008060009054906101000a900460ff169050949350505050565b806000806101000a81548160ff02191690831515021790555050565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f8401126100ed576100ec6100c8565b5b8235905067ffffffffffffffff81111561010a576101096100cd565b5b602083019150836001820283011115610126576101256100d2565b5b9250929050565b60008083601f840112610143576101426100c8565b5b8235905067ffffffffffffffff8111156101605761015f6100cd565b5b60208301915083602082028301111561017c5761017b6100d2565b5b9250929050565b6000806000806040858703121561019d5761019c6100be565b5b600085013567ffffffffffffffff8111156101bb576101ba6100c3565b5b6101c7878288016100d7565b9450945050602085013567ffffffffffffffff8111156101ea576101e96100c3565b5b6101f68782880161012d565b925092505092959194509250565b60008115159050919050565b61021981610204565b82525050565b60006020820190506102346000830184610210565b92915050565b61024381610204565b811461024e57600080fd5b50565b6000813590506102608161023a565b92915050565b60006020828403121561027c5761027b6100be565b5b600061028a84828501610251565b9150509291505056fea2646970667358221220c6fe3428fb7a6c8337071a835a0a3677c9534d8abfd390b1f257996bc1e668ef64736f6c63430008180033";

type MockPlonkVerifierConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockPlonkVerifierConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockPlonkVerifier__factory extends ContractFactory {
  constructor(...args: MockPlonkVerifierConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      MockPlonkVerifier & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MockPlonkVerifier__factory {
    return super.connect(runner) as MockPlonkVerifier__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockPlonkVerifierInterface {
    return new Interface(_abi) as MockPlonkVerifierInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): MockPlonkVerifier {
    return new Contract(address, _abi, runner) as unknown as MockPlonkVerifier;
  }
}
