/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  BlockBuilderRegistry,
  BlockBuilderRegistryInterface,
} from "../../../contracts/Rollup.sol/BlockBuilderRegistry";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "blockBuilder",
        type: "address",
      },
      {
        indexed: false,
        internalType: "string",
        name: "url",
        type: "string",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "stakeAmount",
        type: "uint256",
      },
    ],
    name: "BlockBuilderUpdated",
    type: "event",
  },
  {
    inputs: [],
    name: "CHALLENGE_DURATION",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "MIN_STAKE_AMOUNT",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "blockBuilder",
        type: "address",
      },
    ],
    name: "getBlockBuilder",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "blockBuilderUrl",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "stakeAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "lastBlockTime",
            type: "uint256",
          },
        ],
        internalType: "struct BlockBuilderRegistry.BlockBuilderInfo",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "blockBuilder",
        type: "address",
      },
    ],
    name: "isValidBlockBuilder",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "stopBlockBuilder",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "url",
        type: "string",
      },
    ],
    name: "updateBlockBuilder",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506110cf806100206000396000f3fe6080604052600436106100555760003560e01c80630f36c6381461005a57806327ed71881461007657806333587abf146100a157806351334851146100de57806367ab845b146100f55780636a5387a814610120575b600080fd5b610074600480360381019061006f9190610902565b61015d565b005b34801561008257600080fd5b5061008b6102d0565b6040516100989190610964565b60405180910390f35b3480156100ad57600080fd5b506100c860048036038101906100c391906109dd565b6102d8565b6040516100d59190610ae8565b60405180910390f35b3480156100ea57600080fd5b506100f36103d6565b005b34801561010157600080fd5b5061010a610730565b6040516101179190610964565b60405180910390f35b34801561012c57600080fd5b50610147600480360381019061014291906109dd565b610735565b6040516101549190610b25565b60405180910390f35b6000346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101546101ac9190610b6f565b90506305f5e1008110156101f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ec90610c00565b60405180910390fd5b604051806060016040528083815260200182815260200160008152506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008201518160000190816102649190610e2c565b5060208201518160010155604082015181600201559050503373ffffffffffffffffffffffffffffffffffffffff167f2e6a62283ed761c959aaa67da7e98c90c08118cadc35aae3c7b9d0b258a5440583836040516102c4929190610f37565b60405180910390a25050565b6305f5e10081565b6102e0610787565b6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180606001604052908160008201805461033990610c4f565b80601f016020809104026020016040519081016040528092919081815260200182805461036590610c4f565b80156103b25780601f10610387576101008083540402835291602001916103b2565b820191906000526020600020905b81548152906001019060200180831161039557829003601f168201915b50505050508152602001600182015481526020016002820154815250509050919050565b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101540361045a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161045190610fb3565b60405180910390fd5b603c6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154426104a99190610fd3565b10156104ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e190611079565b60405180910390fd5b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001805461053890610c4f565b80601f016020809104026020016040519081016040528092919081815260200182805461056490610c4f565b80156105b15780601f10610586576101008083540402835291602001916105b1565b820191906000526020600020905b81548152906001019060200180831161059457829003601f168201915b5050505050905060008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154905060405180606001604052806040518060200160405280600081525081526020016000815260200160008152506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082015181600001908161067d9190610e2c565b5060208201518160010155604082015181600201559050503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156106db573d6000803e3d6000fd5b503373ffffffffffffffffffffffffffffffffffffffff167f2e6a62283ed761c959aaa67da7e98c90c08118cadc35aae3c7b9d0b258a544058383604051610724929190610f37565b60405180910390a25050565b603c81565b60006305f5e1006000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015410159050919050565b60405180606001604052806060815260200160008152602001600081525090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61080f826107c6565b810181811067ffffffffffffffff8211171561082e5761082d6107d7565b5b80604052505050565b60006108416107a8565b905061084d8282610806565b919050565b600067ffffffffffffffff82111561086d5761086c6107d7565b5b610876826107c6565b9050602081019050919050565b82818337600083830152505050565b60006108a56108a084610852565b610837565b9050828152602081018484840111156108c1576108c06107c1565b5b6108cc848285610883565b509392505050565b600082601f8301126108e9576108e86107bc565b5b81356108f9848260208601610892565b91505092915050565b600060208284031215610918576109176107b2565b5b600082013567ffffffffffffffff811115610936576109356107b7565b5b610942848285016108d4565b91505092915050565b6000819050919050565b61095e8161094b565b82525050565b60006020820190506109796000830184610955565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006109aa8261097f565b9050919050565b6109ba8161099f565b81146109c557600080fd5b50565b6000813590506109d7816109b1565b92915050565b6000602082840312156109f3576109f26107b2565b5b6000610a01848285016109c8565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610a44578082015181840152602081019050610a29565b60008484015250505050565b6000610a5b82610a0a565b610a658185610a15565b9350610a75818560208601610a26565b610a7e816107c6565b840191505092915050565b610a928161094b565b82525050565b60006060830160008301518482036000860152610ab58282610a50565b9150506020830151610aca6020860182610a89565b506040830151610add6040860182610a89565b508091505092915050565b60006020820190508181036000830152610b028184610a98565b905092915050565b60008115159050919050565b610b1f81610b0a565b82525050565b6000602082019050610b3a6000830184610b16565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610b7a8261094b565b9150610b858361094b565b9250828201905080821115610b9d57610b9c610b40565b5b92915050565b600082825260208201905092915050565b7f496e73756666696369656e74207374616b6520616d6f756e7400000000000000600082015250565b6000610bea601983610ba3565b9150610bf582610bb4565b602082019050919050565b60006020820190508181036000830152610c1981610bdd565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610c6757607f821691505b602082108103610c7a57610c79610c20565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302610ce27fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610ca5565b610cec8683610ca5565b95508019841693508086168417925050509392505050565b6000819050919050565b6000610d29610d24610d1f8461094b565b610d04565b61094b565b9050919050565b6000819050919050565b610d4383610d0e565b610d57610d4f82610d30565b848454610cb2565b825550505050565b600090565b610d6c610d5f565b610d77818484610d3a565b505050565b5b81811015610d9b57610d90600082610d64565b600181019050610d7d565b5050565b601f821115610de057610db181610c80565b610dba84610c95565b81016020851015610dc9578190505b610ddd610dd585610c95565b830182610d7c565b50505b505050565b600082821c905092915050565b6000610e0360001984600802610de5565b1980831691505092915050565b6000610e1c8383610df2565b9150826002028217905092915050565b610e3582610a0a565b67ffffffffffffffff811115610e4e57610e4d6107d7565b5b610e588254610c4f565b610e63828285610d9f565b600060209050601f831160018114610e965760008415610e84578287015190505b610e8e8582610e10565b865550610ef6565b601f198416610ea486610c80565b60005b82811015610ecc57848901518255600182019150602085019450602081019050610ea7565b86831015610ee95784890151610ee5601f891682610df2565b8355505b6001600288020188555050505b505050505050565b6000610f0982610a0a565b610f138185610ba3565b9350610f23818560208601610a26565b610f2c816107c6565b840191505092915050565b60006040820190508181036000830152610f518185610efe565b9050610f606020830184610955565b9392505050565b7f426c6f636b206275696c646572206e6f7420666f756e64000000000000000000600082015250565b6000610f9d601783610ba3565b9150610fa882610f67565b602082019050919050565b60006020820190508181036000830152610fcc81610f90565b9050919050565b6000610fde8261094b565b9150610fe98361094b565b925082820390508181111561100157611000610b40565b5b92915050565b7f43616e6e6f7420756e7374616b652077697468696e206f6e6520646179206f6660008201527f20746865206c61737420626c6f636b207375626d697373696f6e000000000000602082015250565b6000611063603a83610ba3565b915061106e82611007565b604082019050919050565b6000602082019050818103600083015261109281611056565b905091905056fea2646970667358221220d89eabd7d961ac31701ad2095bdb2a0f5389354673be8c575cbd915392b6b16164736f6c63430008140033";

type BlockBuilderRegistryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BlockBuilderRegistryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BlockBuilderRegistry__factory extends ContractFactory {
  constructor(...args: BlockBuilderRegistryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<BlockBuilderRegistry> {
    return super.deploy(overrides || {}) as Promise<BlockBuilderRegistry>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): BlockBuilderRegistry {
    return super.attach(address) as BlockBuilderRegistry;
  }
  override connect(signer: Signer): BlockBuilderRegistry__factory {
    return super.connect(signer) as BlockBuilderRegistry__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BlockBuilderRegistryInterface {
    return new utils.Interface(_abi) as BlockBuilderRegistryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BlockBuilderRegistry {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as BlockBuilderRegistry;
  }
}
