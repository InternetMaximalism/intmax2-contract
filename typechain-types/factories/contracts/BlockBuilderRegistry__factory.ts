/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  BlockBuilderRegistry,
  BlockBuilderRegistryInterface,
} from "../../contracts/BlockBuilderRegistry";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "blockBuilder",
        type: "address",
      },
    ],
    name: "BlockBuilderStoped",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "blockBuilder",
        type: "address",
      },
      {
        indexed: false,
        internalType: "string",
        name: "url",
        type: "string",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "stakeAmount",
        type: "uint256",
      },
    ],
    name: "BlockBuilderUpdated",
    type: "event",
  },
  {
    inputs: [],
    name: "CHALLENGE_DURATION",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "MIN_STAKE_AMOUNT",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "blockBuilder",
        type: "address",
      },
    ],
    name: "getBlockBuilder",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "blockBuilderUrl",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "stakeAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "stopTime",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "numSlashes",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "isValid",
            type: "bool",
          },
        ],
        internalType: "struct IBlockBuilderRegistry.BlockBuilderInfo",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "blockBuilder",
        type: "address",
      },
    ],
    name: "isValidBlockBuilder",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "blockNumber",
        type: "uint32",
      },
      {
        internalType: "address",
        name: "blockBuilder",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "publicInputs",
        type: "uint256[]",
      },
      {
        internalType: "bytes",
        name: "proof",
        type: "bytes",
      },
    ],
    name: "slashBlockBuilder",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "stopBlockBuilder",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "unstake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "url",
        type: "string",
      },
    ],
    name: "updateBlockBuilder",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50611659806100206000396000f3fe60806040526004361061007b5760003560e01c8063513348511161004e578063513348511461011b57806367ab845b146101325780636a5387a81461015d578063d4d80a071461019a5761007b565b80630f36c6381461008057806327ed71881461009c5780632def6620146100c757806333587abf146100de575b600080fd5b61009a60048036038101906100959190610cbe565b6101c3565b005b3480156100a857600080fd5b506100b161038b565b6040516100be9190610d20565b60405180910390f35b3480156100d357600080fd5b506100dc610393565b005b3480156100ea57600080fd5b5061010560048036038101906101009190610d99565b6106d3565b6040516101129190610ee5565b60405180910390f35b34801561012757600080fd5b506101306107f6565b005b34801561013e57600080fd5b50610147610905565b6040516101549190610d20565b60405180910390f35b34801561016957600080fd5b50610184600480360381019061017f9190610d99565b61090a565b6040516101919190610f16565b60405180910390f35b3480156101a657600080fd5b506101c160048036038101906101bc9190611023565b610962565b005b6000346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015461021291906110f9565b90506305f5e10081101561025b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102529061118a565b60405180910390fd5b816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000190816102a991906113b6565b50806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018190555060008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201819055503373ffffffffffffffffffffffffffffffffffffffff167f2e6a62283ed761c959aaa67da7e98c90c08118cadc35aae3c7b9d0b258a54405838360405161037f9291906114c1565b60405180910390a25050565b6305f5e10081565b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015403610417576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161040e9061153d565b60405180910390fd5b603c6000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002015442610466919061155d565b10156104a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161049e90611603565b60405180910390fd5b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000180546104f5906111d9565b80601f0160208091040260200160405190810160405280929190818152602001828054610521906111d9565b801561056e5780601f106105435761010080835404028352916020019161056e565b820191906000526020600020905b81548152906001019060200180831161055157829003601f168201915b5050505050905060008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015490506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000808201600061060a9190610ad6565b6001820160009055600282016000905560038201600090556004820160006101000a81549060ff021916905550503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801561067e573d6000803e3d6000fd5b503373ffffffffffffffffffffffffffffffffffffffff167f2e6a62283ed761c959aaa67da7e98c90c08118cadc35aae3c7b9d0b258a5440583836040516106c79291906114c1565b60405180910390a25050565b6106db610b16565b6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060a0016040529081600082018054610734906111d9565b80601f0160208091040260200160405190810160405280929190818152602001828054610760906111d9565b80156107ad5780601f10610782576101008083540402835291602001916107ad565b820191906000526020600020905b81548152906001019060200180831161079057829003601f168201915b505050505081526020016001820154815260200160028201548152602001600382015481526020016004820160009054906101000a900460ff1615151515815250509050919050565b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101540361087a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108719061153d565b60405180910390fd5b426000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201819055503373ffffffffffffffffffffffffffffffffffffffff167f93e5347bfe24301285595924ebe1940d4d0bce1c95b212d44fcf6ec4c0f2c14560405160405180910390a2565b603c81565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160009054906101000a900460ff169050919050565b60016000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030160008282546109b491906110f9565b925050819055506109c485610a84565b158015610a1c57506000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160009054906101000a900460ff165b15610a7c5760008060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160006101000a81548160ff0219169083151502179055505b505050505050565b60006305f5e1006000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015410159050919050565b508054610ae2906111d9565b6000825580601f10610af45750610b13565b601f016020900490600052602060002090810190610b129190610b47565b5b50565b6040518060a00160405280606081526020016000815260200160008152602001600081526020016000151581525090565b5b80821115610b60576000816000905550600101610b48565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610bcb82610b82565b810181811067ffffffffffffffff82111715610bea57610be9610b93565b5b80604052505050565b6000610bfd610b64565b9050610c098282610bc2565b919050565b600067ffffffffffffffff821115610c2957610c28610b93565b5b610c3282610b82565b9050602081019050919050565b82818337600083830152505050565b6000610c61610c5c84610c0e565b610bf3565b905082815260208101848484011115610c7d57610c7c610b7d565b5b610c88848285610c3f565b509392505050565b600082601f830112610ca557610ca4610b78565b5b8135610cb5848260208601610c4e565b91505092915050565b600060208284031215610cd457610cd3610b6e565b5b600082013567ffffffffffffffff811115610cf257610cf1610b73565b5b610cfe84828501610c90565b91505092915050565b6000819050919050565b610d1a81610d07565b82525050565b6000602082019050610d356000830184610d11565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610d6682610d3b565b9050919050565b610d7681610d5b565b8114610d8157600080fd5b50565b600081359050610d9381610d6d565b92915050565b600060208284031215610daf57610dae610b6e565b5b6000610dbd84828501610d84565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610e00578082015181840152602081019050610de5565b60008484015250505050565b6000610e1782610dc6565b610e218185610dd1565b9350610e31818560208601610de2565b610e3a81610b82565b840191505092915050565b610e4e81610d07565b82525050565b60008115159050919050565b610e6981610e54565b82525050565b600060a0830160008301518482036000860152610e8c8282610e0c565b9150506020830151610ea16020860182610e45565b506040830151610eb46040860182610e45565b506060830151610ec76060860182610e45565b506080830151610eda6080860182610e60565b508091505092915050565b60006020820190508181036000830152610eff8184610e6f565b905092915050565b610f1081610e54565b82525050565b6000602082019050610f2b6000830184610f07565b92915050565b600063ffffffff82169050919050565b610f4a81610f31565b8114610f5557600080fd5b50565b600081359050610f6781610f41565b92915050565b600080fd5b600080fd5b60008083601f840112610f8d57610f8c610b78565b5b8235905067ffffffffffffffff811115610faa57610fa9610f6d565b5b602083019150836020820283011115610fc657610fc5610f72565b5b9250929050565b60008083601f840112610fe357610fe2610b78565b5b8235905067ffffffffffffffff81111561100057610fff610f6d565b5b60208301915083600182028301111561101c5761101b610f72565b5b9250929050565b600080600080600080608087890312156110405761103f610b6e565b5b600061104e89828a01610f58565b965050602061105f89828a01610d84565b955050604087013567ffffffffffffffff8111156110805761107f610b73565b5b61108c89828a01610f77565b9450945050606087013567ffffffffffffffff8111156110af576110ae610b73565b5b6110bb89828a01610fcd565b92509250509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061110482610d07565b915061110f83610d07565b9250828201905080821115611127576111266110ca565b5b92915050565b600082825260208201905092915050565b7f496e73756666696369656e74207374616b6520616d6f756e7400000000000000600082015250565b600061117460198361112d565b915061117f8261113e565b602082019050919050565b600060208201905081810360008301526111a381611167565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806111f157607f821691505b602082108103611204576112036111aa565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830261126c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261122f565b611276868361122f565b95508019841693508086168417925050509392505050565b6000819050919050565b60006112b36112ae6112a984610d07565b61128e565b610d07565b9050919050565b6000819050919050565b6112cd83611298565b6112e16112d9826112ba565b84845461123c565b825550505050565b600090565b6112f66112e9565b6113018184846112c4565b505050565b5b818110156113255761131a6000826112ee565b600181019050611307565b5050565b601f82111561136a5761133b8161120a565b6113448461121f565b81016020851015611353578190505b61136761135f8561121f565b830182611306565b50505b505050565b600082821c905092915050565b600061138d6000198460080261136f565b1980831691505092915050565b60006113a6838361137c565b9150826002028217905092915050565b6113bf82610dc6565b67ffffffffffffffff8111156113d8576113d7610b93565b5b6113e282546111d9565b6113ed828285611329565b600060209050601f831160018114611420576000841561140e578287015190505b611418858261139a565b865550611480565b601f19841661142e8661120a565b60005b8281101561145657848901518255600182019150602085019450602081019050611431565b86831015611473578489015161146f601f89168261137c565b8355505b6001600288020188555050505b505050505050565b600061149382610dc6565b61149d818561112d565b93506114ad818560208601610de2565b6114b681610b82565b840191505092915050565b600060408201905081810360008301526114db8185611488565b90506114ea6020830184610d11565b9392505050565b7f426c6f636b206275696c646572206e6f7420666f756e64000000000000000000600082015250565b600061152760178361112d565b9150611532826114f1565b602082019050919050565b600060208201905081810360008301526115568161151a565b9050919050565b600061156882610d07565b915061157383610d07565b925082820390508181111561158b5761158a6110ca565b5b92915050565b7f43616e6e6f7420756e7374616b652077697468696e206f6e6520646179206f6660008201527f20746865206c61737420626c6f636b207375626d697373696f6e000000000000602082015250565b60006115ed603a8361112d565b91506115f882611591565b604082019050919050565b6000602082019050818103600083015261161c816115e0565b905091905056fea26469706673582212203d4b3ced98a1d8336a9c3b37c924754ea88a975acc77f199ff3e4b3ba92dcb3264736f6c63430008140033";

type BlockBuilderRegistryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BlockBuilderRegistryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BlockBuilderRegistry__factory extends ContractFactory {
  constructor(...args: BlockBuilderRegistryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<BlockBuilderRegistry> {
    return super.deploy(overrides || {}) as Promise<BlockBuilderRegistry>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): BlockBuilderRegistry {
    return super.attach(address) as BlockBuilderRegistry;
  }
  override connect(signer: Signer): BlockBuilderRegistry__factory {
    return super.connect(signer) as BlockBuilderRegistry__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BlockBuilderRegistryInterface {
    return new utils.Interface(_abi) as BlockBuilderRegistryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BlockBuilderRegistry {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as BlockBuilderRegistry;
  }
}
