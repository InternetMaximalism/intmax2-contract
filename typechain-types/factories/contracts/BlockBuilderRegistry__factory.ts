/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  BlockBuilderRegistry,
  BlockBuilderRegistryInterface,
} from "../../contracts/BlockBuilderRegistry";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "rollupContract",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "blockBuilder",
        type: "address",
      },
    ],
    name: "BlockBuilderStoped",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "blockBuilder",
        type: "address",
      },
      {
        indexed: false,
        internalType: "string",
        name: "url",
        type: "string",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "stakeAmount",
        type: "uint256",
      },
    ],
    name: "BlockBuilderUpdated",
    type: "event",
  },
  {
    inputs: [],
    name: "CHALLENGE_DURATION",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "MIN_STAKE_AMOUNT",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "blockBuilder",
        type: "address",
      },
    ],
    name: "getBlockBuilder",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "blockBuilderUrl",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "stakeAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "stopTime",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "numSlashes",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "isValid",
            type: "bool",
          },
        ],
        internalType: "struct IBlockBuilderRegistry.BlockBuilderInfo",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "blockBuilder",
        type: "address",
      },
    ],
    name: "isValidBlockBuilder",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "blockNumber",
        type: "uint32",
      },
      {
        internalType: "address",
        name: "blockBuilder",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "publicInputs",
        type: "uint256[]",
      },
      {
        internalType: "bytes",
        name: "proof",
        type: "bytes",
      },
    ],
    name: "slashBlockBuilder",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "stopBlockBuilder",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "unstake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "url",
        type: "string",
      },
    ],
    name: "updateBlockBuilder",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162001857380380620018578339818101604052810190620000379190620000e8565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200011a565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000b08262000083565b9050919050565b620000c281620000a3565b8114620000ce57600080fd5b50565b600081519050620000e281620000b7565b92915050565b6000602082840312156200010157620001006200007e565b5b60006200011184828501620000d1565b91505092915050565b61172d806200012a6000396000f3fe60806040526004361061007b5760003560e01c8063513348511161004e578063513348511461011b57806367ab845b146101325780636a5387a81461015d578063d4d80a071461019a5761007b565b80630f36c6381461008057806327ed71881461009c5780632def6620146100c757806333587abf146100de575b600080fd5b61009a60048036038101906100959190610d92565b6101c3565b005b3480156100a857600080fd5b506100b16103f8565b6040516100be9190610df4565b60405180910390f35b3480156100d357600080fd5b506100dc610400565b005b3480156100ea57600080fd5b5061010560048036038101906101009190610e6d565b610745565b6040516101129190610fb9565b60405180910390f35b34801561012757600080fd5b50610130610869565b005b34801561013e57600080fd5b506101476109d5565b6040516101549190610df4565b60405180910390f35b34801561016957600080fd5b50610184600480360381019061017f9190610e6d565b6109da565b6040516101919190610fea565b60405180910390f35b3480156101a657600080fd5b506101c160048036038101906101bc91906110f7565b610a33565b005b600034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015461021391906111cd565b90506305f5e10081101561025c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102539061125e565b60405180910390fd5b81600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000190816102ab919061148a565b5080600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055506000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002018190555061034433610b57565b156103a45760018060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160006101000a81548160ff0219169083151502179055505b3373ffffffffffffffffffffffffffffffffffffffff167f2e6a62283ed761c959aaa67da7e98c90c08118cadc35aae3c7b9d0b258a5440583836040516103ec929190611595565b60405180910390a25050565b6305f5e10081565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015403610485576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047c90611611565b60405180910390fd5b6005600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154426104d59190611631565b1015610516576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050d906116d7565b60405180910390fd5b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018054610565906112ad565b80601f0160208091040260200160405190810160405280929190818152602001828054610591906112ad565b80156105de5780601f106105b3576101008083540402835291602001916105de565b820191906000526020600020905b8154815290600101906020018083116105c157829003601f168201915b505050505090506000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101549050600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000808201600061067c9190610baa565b6001820160009055600282016000905560038201600090556004820160006101000a81549060ff021916905550503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156106f0573d6000803e3d6000fd5b503373ffffffffffffffffffffffffffffffffffffffff167f2e6a62283ed761c959aaa67da7e98c90c08118cadc35aae3c7b9d0b258a544058383604051610739929190611595565b60405180910390a25050565b61074d610bea565b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060a00160405290816000820180546107a7906112ad565b80601f01602080910402602001604051908101604052809291908181526020018280546107d3906112ad565b80156108205780601f106107f557610100808354040283529160200191610820565b820191906000526020600020905b81548152906001019060200180831161080357829003601f168201915b505050505081526020016001820154815260200160028201548152602001600382015481526020016004820160009054906101000a900460ff1615151515815250509050919050565b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154036108ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108e590611611565b60405180910390fd5b42600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201819055506000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160006101000a81548160ff0219169083151502179055503373ffffffffffffffffffffffffffffffffffffffff167f93e5347bfe24301285595924ebe1940d4d0bce1c95b212d44fcf6ec4c0f2c14560405160405180910390a2565b600581565b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160009054906101000a900460ff169050919050565b60018060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003016000828254610a8591906111cd565b92505081905550610a9585610b57565b158015610aee5750600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160009054906101000a900460ff165b15610b4f576000600160008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160006101000a81548160ff0219169083151502179055505b505050505050565b60006305f5e100600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015410159050919050565b508054610bb6906112ad565b6000825580601f10610bc85750610be7565b601f016020900490600052602060002090810190610be69190610c1b565b5b50565b6040518060a00160405280606081526020016000815260200160008152602001600081526020016000151581525090565b5b80821115610c34576000816000905550600101610c1c565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610c9f82610c56565b810181811067ffffffffffffffff82111715610cbe57610cbd610c67565b5b80604052505050565b6000610cd1610c38565b9050610cdd8282610c96565b919050565b600067ffffffffffffffff821115610cfd57610cfc610c67565b5b610d0682610c56565b9050602081019050919050565b82818337600083830152505050565b6000610d35610d3084610ce2565b610cc7565b905082815260208101848484011115610d5157610d50610c51565b5b610d5c848285610d13565b509392505050565b600082601f830112610d7957610d78610c4c565b5b8135610d89848260208601610d22565b91505092915050565b600060208284031215610da857610da7610c42565b5b600082013567ffffffffffffffff811115610dc657610dc5610c47565b5b610dd284828501610d64565b91505092915050565b6000819050919050565b610dee81610ddb565b82525050565b6000602082019050610e096000830184610de5565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610e3a82610e0f565b9050919050565b610e4a81610e2f565b8114610e5557600080fd5b50565b600081359050610e6781610e41565b92915050565b600060208284031215610e8357610e82610c42565b5b6000610e9184828501610e58565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610ed4578082015181840152602081019050610eb9565b60008484015250505050565b6000610eeb82610e9a565b610ef58185610ea5565b9350610f05818560208601610eb6565b610f0e81610c56565b840191505092915050565b610f2281610ddb565b82525050565b60008115159050919050565b610f3d81610f28565b82525050565b600060a0830160008301518482036000860152610f608282610ee0565b9150506020830151610f756020860182610f19565b506040830151610f886040860182610f19565b506060830151610f9b6060860182610f19565b506080830151610fae6080860182610f34565b508091505092915050565b60006020820190508181036000830152610fd38184610f43565b905092915050565b610fe481610f28565b82525050565b6000602082019050610fff6000830184610fdb565b92915050565b600063ffffffff82169050919050565b61101e81611005565b811461102957600080fd5b50565b60008135905061103b81611015565b92915050565b600080fd5b600080fd5b60008083601f84011261106157611060610c4c565b5b8235905067ffffffffffffffff81111561107e5761107d611041565b5b60208301915083602082028301111561109a57611099611046565b5b9250929050565b60008083601f8401126110b7576110b6610c4c565b5b8235905067ffffffffffffffff8111156110d4576110d3611041565b5b6020830191508360018202830111156110f0576110ef611046565b5b9250929050565b6000806000806000806080878903121561111457611113610c42565b5b600061112289828a0161102c565b965050602061113389828a01610e58565b955050604087013567ffffffffffffffff81111561115457611153610c47565b5b61116089828a0161104b565b9450945050606087013567ffffffffffffffff81111561118357611182610c47565b5b61118f89828a016110a1565b92509250509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006111d882610ddb565b91506111e383610ddb565b92508282019050808211156111fb576111fa61119e565b5b92915050565b600082825260208201905092915050565b7f496e73756666696369656e74207374616b6520616d6f756e7400000000000000600082015250565b6000611248601983611201565b915061125382611212565b602082019050919050565b600060208201905081810360008301526112778161123b565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806112c557607f821691505b6020821081036112d8576112d761127e565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026113407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82611303565b61134a8683611303565b95508019841693508086168417925050509392505050565b6000819050919050565b600061138761138261137d84610ddb565b611362565b610ddb565b9050919050565b6000819050919050565b6113a18361136c565b6113b56113ad8261138e565b848454611310565b825550505050565b600090565b6113ca6113bd565b6113d5818484611398565b505050565b5b818110156113f9576113ee6000826113c2565b6001810190506113db565b5050565b601f82111561143e5761140f816112de565b611418846112f3565b81016020851015611427578190505b61143b611433856112f3565b8301826113da565b50505b505050565b600082821c905092915050565b600061146160001984600802611443565b1980831691505092915050565b600061147a8383611450565b9150826002028217905092915050565b61149382610e9a565b67ffffffffffffffff8111156114ac576114ab610c67565b5b6114b682546112ad565b6114c18282856113fd565b600060209050601f8311600181146114f457600084156114e2578287015190505b6114ec858261146e565b865550611554565b601f198416611502866112de565b60005b8281101561152a57848901518255600182019150602085019450602081019050611505565b868310156115475784890151611543601f891682611450565b8355505b6001600288020188555050505b505050505050565b600061156782610e9a565b6115718185611201565b9350611581818560208601610eb6565b61158a81610c56565b840191505092915050565b600060408201905081810360008301526115af818561155c565b90506115be6020830184610de5565b9392505050565b7f426c6f636b206275696c646572206e6f7420666f756e64000000000000000000600082015250565b60006115fb601783611201565b9150611606826115c5565b602082019050919050565b6000602082019050818103600083015261162a816115ee565b9050919050565b600061163c82610ddb565b915061164783610ddb565b925082820390508181111561165f5761165e61119e565b5b92915050565b7f43616e6e6f7420756e7374616b652077697468696e206f6e6520646179206f6660008201527f20746865206c61737420626c6f636b207375626d697373696f6e000000000000602082015250565b60006116c1603a83611201565b91506116cc82611665565b604082019050919050565b600060208201905081810360008301526116f0816116b4565b905091905056fea26469706673582212205a87b07ff9bb84d0a05253ab792bf62893a26e2923e5bb2f08ebf772c630a64764736f6c63430008140033";

type BlockBuilderRegistryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BlockBuilderRegistryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BlockBuilderRegistry__factory extends ContractFactory {
  constructor(...args: BlockBuilderRegistryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    rollupContract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<BlockBuilderRegistry> {
    return super.deploy(
      rollupContract,
      overrides || {}
    ) as Promise<BlockBuilderRegistry>;
  }
  override getDeployTransaction(
    rollupContract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(rollupContract, overrides || {});
  }
  override attach(address: string): BlockBuilderRegistry {
    return super.attach(address) as BlockBuilderRegistry;
  }
  override connect(signer: Signer): BlockBuilderRegistry__factory {
    return super.connect(signer) as BlockBuilderRegistry__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BlockBuilderRegistryInterface {
    return new utils.Interface(_abi) as BlockBuilderRegistryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BlockBuilderRegistry {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as BlockBuilderRegistry;
  }
}
