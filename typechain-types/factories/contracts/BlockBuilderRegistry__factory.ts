/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  BlockBuilderRegistry,
  BlockBuilderRegistryInterface,
} from "../../contracts/BlockBuilderRegistry";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "rollupContract",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "blockBuilder",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "challenger",
        type: "address",
      },
    ],
    name: "BlockBuilderSlashed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "blockBuilder",
        type: "address",
      },
    ],
    name: "BlockBuilderStoped",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "blockBuilder",
        type: "address",
      },
      {
        indexed: false,
        internalType: "string",
        name: "url",
        type: "string",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "stakeAmount",
        type: "uint256",
      },
    ],
    name: "BlockBuilderUpdated",
    type: "event",
  },
  {
    inputs: [],
    name: "CHALLENGE_DURATION",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "MIN_STAKE_AMOUNT",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "blockBuilder",
        type: "address",
      },
    ],
    name: "getBlockBuilder",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "blockBuilderUrl",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "stakeAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "stopTime",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "numSlashes",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "isValid",
            type: "bool",
          },
        ],
        internalType: "struct IBlockBuilderRegistry.BlockBuilderInfo",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "blockBuilder",
        type: "address",
      },
    ],
    name: "isValidBlockBuilder",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "blockBuilder",
        type: "address",
      },
      {
        internalType: "address",
        name: "challenger",
        type: "address",
      },
    ],
    name: "slashBlockBuilder",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "stopBlockBuilder",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "unstake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "url",
        type: "string",
      },
    ],
    name: "updateBlockBuilder",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405261dead600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503480156200005457600080fd5b5060405162001c7938038062001c7983398181016040528101906200007a91906200012b565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200015d565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000f382620000c6565b9050919050565b6200010581620000e6565b81146200011157600080fd5b50565b6000815190506200012581620000fa565b92915050565b600060208284031215620001445762000143620000c1565b5b6000620001548482850162000114565b91505092915050565b611b0c806200016d6000396000f3fe60806040526004361061007b5760003560e01c8063513348511161004e578063513348511461011b57806367ab845b146101325780636a5387a81461015d578063750d38cb1461019a5761007b565b80630f36c6381461008057806327ed71881461009c5780632def6620146100c757806333587abf146100de575b600080fd5b61009a600480360381019061009591906111d8565b6101c3565b005b3480156100a857600080fd5b506100b16103f9565b6040516100be919061123a565b60405180910390f35b3480156100d357600080fd5b506100dc610401565b005b3480156100ea57600080fd5b50610105600480360381019061010091906112b3565b610746565b60405161011291906113ff565b60405180910390f35b34801561012757600080fd5b5061013061086a565b005b34801561013e57600080fd5b506101476109d6565b604051610154919061123a565b60405180910390f35b34801561016957600080fd5b50610184600480360381019061017f91906112b3565b6109db565b6040516101919190611430565b60405180910390f35b3480156101a657600080fd5b506101c160048036038101906101bc919061144b565b610a34565b005b600034600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015461021391906114ba565b90506305f5e10081101561025c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102539061154b565b60405180910390fd5b81600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000190816102ab9190611777565b5080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055506000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002018190555061034433610f9d565b156103a5576001600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160006101000a81548160ff0219169083151502179055505b3373ffffffffffffffffffffffffffffffffffffffff167f2e6a62283ed761c959aaa67da7e98c90c08118cadc35aae3c7b9d0b258a5440583836040516103ed929190611882565b60405180910390a25050565b6305f5e10081565b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015403610486576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047d906118fe565b60405180910390fd5b6005600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154426104d6919061191e565b1015610517576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050e906119c4565b60405180910390fd5b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000180546105669061159a565b80601f01602080910402602001604051908101604052809291908181526020018280546105929061159a565b80156105df5780601f106105b4576101008083540402835291602001916105df565b820191906000526020600020905b8154815290600101906020018083116105c257829003601f168201915b505050505090506000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101549050600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000808201600061067d9190610ff0565b6001820160009055600282016000905560038201600090556004820160006101000a81549060ff021916905550503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156106f1573d6000803e3d6000fd5b503373ffffffffffffffffffffffffffffffffffffffff167f2e6a62283ed761c959aaa67da7e98c90c08118cadc35aae3c7b9d0b258a54405838360405161073a929190611882565b60405180910390a25050565b61074e611030565b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060a00160405290816000820180546107a89061159a565b80601f01602080910402602001604051908101604052809291908181526020018280546107d49061159a565b80156108215780601f106107f657610100808354040283529160200191610821565b820191906000526020600020905b81548152906001019060200180831161080457829003601f168201915b505050505081526020016001820154815260200160028201548152602001600382015481526020016004820160009054906101000a900460ff1615151515815250509050919050565b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154036108ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108e6906118fe565b60405180910390fd5b42600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201819055506000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160006101000a81548160ff0219169083151502179055503373ffffffffffffffffffffffffffffffffffffffff167f93e5347bfe24301285595924ebe1940d4d0bce1c95b212d44fcf6ec4c0f2c14560405160405180910390a2565b600581565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160009054906101000a900460ff169050919050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ac2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ab990611a56565b60405180910390fd5b6001600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003016000828254610b1591906114ba565b92505081905550610b2582610f9d565b158015610b7e5750600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160009054906101000a900460ff165b15610bdf576000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160006101000a81548160ff0219169083151502179055505b6305f5e100600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101541015610e02576000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015490506000600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018190555060026305f5e100610ccd9190611aa5565b811015610d20578173ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610d1a573d6000803e3d6000fd5b50610dfc565b8173ffffffffffffffffffffffffffffffffffffffff166108fc60026305f5e100610d4b9190611aa5565b9081150290604051600060405180830381858888f19350505050158015610d76573d6000803e3d6000fd5b50600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc60026305f5e100610dc49190611aa5565b83610dcf919061191e565b9081150290604051600060405180830381858888f19350505050158015610dfa573d6000803e3d6000fd5b505b50610f3f565b6305f5e100600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001016000828254610e58919061191e565b925050819055508073ffffffffffffffffffffffffffffffffffffffff166108fc60026305f5e100610e8a9190611aa5565b9081150290604051600060405180830381858888f19350505050158015610eb5573d6000803e3d6000fd5b50600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc60026305f5e100610f039190611aa5565b6305f5e100610f12919061191e565b9081150290604051600060405180830381858888f19350505050158015610f3d573d6000803e3d6000fd5b505b8073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fbebe1ecc1c646675c6bd0423039fd8cdde200d8e4dac2b345abdc23bf8d97a6960405160405180910390a35050565b60006305f5e100600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015410159050919050565b508054610ffc9061159a565b6000825580601f1061100e575061102d565b601f01602090049060005260206000209081019061102c9190611061565b5b50565b6040518060a00160405280606081526020016000815260200160008152602001600081526020016000151581525090565b5b8082111561107a576000816000905550600101611062565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6110e58261109c565b810181811067ffffffffffffffff82111715611104576111036110ad565b5b80604052505050565b600061111761107e565b905061112382826110dc565b919050565b600067ffffffffffffffff821115611143576111426110ad565b5b61114c8261109c565b9050602081019050919050565b82818337600083830152505050565b600061117b61117684611128565b61110d565b90508281526020810184848401111561119757611196611097565b5b6111a2848285611159565b509392505050565b600082601f8301126111bf576111be611092565b5b81356111cf848260208601611168565b91505092915050565b6000602082840312156111ee576111ed611088565b5b600082013567ffffffffffffffff81111561120c5761120b61108d565b5b611218848285016111aa565b91505092915050565b6000819050919050565b61123481611221565b82525050565b600060208201905061124f600083018461122b565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061128082611255565b9050919050565b61129081611275565b811461129b57600080fd5b50565b6000813590506112ad81611287565b92915050565b6000602082840312156112c9576112c8611088565b5b60006112d78482850161129e565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561131a5780820151818401526020810190506112ff565b60008484015250505050565b6000611331826112e0565b61133b81856112eb565b935061134b8185602086016112fc565b6113548161109c565b840191505092915050565b61136881611221565b82525050565b60008115159050919050565b6113838161136e565b82525050565b600060a08301600083015184820360008601526113a68282611326565b91505060208301516113bb602086018261135f565b5060408301516113ce604086018261135f565b5060608301516113e1606086018261135f565b5060808301516113f4608086018261137a565b508091505092915050565b600060208201905081810360008301526114198184611389565b905092915050565b61142a8161136e565b82525050565b60006020820190506114456000830184611421565b92915050565b6000806040838503121561146257611461611088565b5b60006114708582860161129e565b92505060206114818582860161129e565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006114c582611221565b91506114d083611221565b92508282019050808211156114e8576114e761148b565b5b92915050565b600082825260208201905092915050565b7f496e73756666696369656e74207374616b6520616d6f756e7400000000000000600082015250565b60006115356019836114ee565b9150611540826114ff565b602082019050919050565b6000602082019050818103600083015261156481611528565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806115b257607f821691505b6020821081036115c5576115c461156b565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830261162d7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826115f0565b61163786836115f0565b95508019841693508086168417925050509392505050565b6000819050919050565b600061167461166f61166a84611221565b61164f565b611221565b9050919050565b6000819050919050565b61168e83611659565b6116a261169a8261167b565b8484546115fd565b825550505050565b600090565b6116b76116aa565b6116c2818484611685565b505050565b5b818110156116e6576116db6000826116af565b6001810190506116c8565b5050565b601f82111561172b576116fc816115cb565b611705846115e0565b81016020851015611714578190505b611728611720856115e0565b8301826116c7565b50505b505050565b600082821c905092915050565b600061174e60001984600802611730565b1980831691505092915050565b6000611767838361173d565b9150826002028217905092915050565b611780826112e0565b67ffffffffffffffff811115611799576117986110ad565b5b6117a3825461159a565b6117ae8282856116ea565b600060209050601f8311600181146117e157600084156117cf578287015190505b6117d9858261175b565b865550611841565b601f1984166117ef866115cb565b60005b82811015611817578489015182556001820191506020850194506020810190506117f2565b868310156118345784890151611830601f89168261173d565b8355505b6001600288020188555050505b505050505050565b6000611854826112e0565b61185e81856114ee565b935061186e8185602086016112fc565b6118778161109c565b840191505092915050565b6000604082019050818103600083015261189c8185611849565b90506118ab602083018461122b565b9392505050565b7f426c6f636b206275696c646572206e6f7420666f756e64000000000000000000600082015250565b60006118e86017836114ee565b91506118f3826118b2565b602082019050919050565b60006020820190508181036000830152611917816118db565b9050919050565b600061192982611221565b915061193483611221565b925082820390508181111561194c5761194b61148b565b5b92915050565b7f43616e6e6f7420756e7374616b652077697468696e206f6e6520646179206f6660008201527f20746865206c61737420626c6f636b207375626d697373696f6e000000000000602082015250565b60006119ae603a836114ee565b91506119b982611952565b604082019050919050565b600060208201905081810360008301526119dd816119a1565b9050919050565b7f54686973206d6574686f642063616e206f6e6c792062652063616c6c6564206660008201527f726f6d20526f6c6c757020636f6e74726163742e000000000000000000000000602082015250565b6000611a406034836114ee565b9150611a4b826119e4565b604082019050919050565b60006020820190508181036000830152611a6f81611a33565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611ab082611221565b9150611abb83611221565b925082611acb57611aca611a76565b5b82820490509291505056fea2646970667358221220651dff0415a3fffbc976cdfbf79a6c6cd35931147424e3bbb0dc96e4a7ca5ac564736f6c63430008180033";

type BlockBuilderRegistryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BlockBuilderRegistryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BlockBuilderRegistry__factory extends ContractFactory {
  constructor(...args: BlockBuilderRegistryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    rollupContract: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(rollupContract, overrides || {});
  }
  override deploy(
    rollupContract: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(rollupContract, overrides || {}) as Promise<
      BlockBuilderRegistry & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): BlockBuilderRegistry__factory {
    return super.connect(runner) as BlockBuilderRegistry__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BlockBuilderRegistryInterface {
    return new Interface(_abi) as BlockBuilderRegistryInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): BlockBuilderRegistry {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as BlockBuilderRegistry;
  }
}
