/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  BlockBuilderRegistry,
  BlockBuilderRegistryInterface,
} from "../../contracts/BlockBuilderRegistry";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "blockBuilder",
        type: "address",
      },
    ],
    name: "BlockBuilderStoped",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "blockBuilder",
        type: "address",
      },
      {
        indexed: false,
        internalType: "string",
        name: "url",
        type: "string",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "stakeAmount",
        type: "uint256",
      },
    ],
    name: "BlockBuilderUpdated",
    type: "event",
  },
  {
    inputs: [],
    name: "CHALLENGE_DURATION",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "MIN_STAKE_AMOUNT",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "blockBuilder",
        type: "address",
      },
    ],
    name: "getBlockBuilder",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "blockBuilderUrl",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "stakeAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "stopTime",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "numSlashes",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "isValid",
            type: "bool",
          },
        ],
        internalType: "struct IBlockBuilderRegistry.BlockBuilderInfo",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "blockBuilder",
        type: "address",
      },
    ],
    name: "isValidBlockBuilder",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "blockNumber",
        type: "uint32",
      },
      {
        internalType: "address",
        name: "blockBuilder",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "publicInputs",
        type: "uint256[]",
      },
      {
        internalType: "bytes",
        name: "proof",
        type: "bytes",
      },
    ],
    name: "slashBlockBuilder",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "stopBlockBuilder",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "unstake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "url",
        type: "string",
      },
    ],
    name: "updateBlockBuilder",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061171c806100206000396000f3fe60806040526004361061007b5760003560e01c8063513348511161004e578063513348511461011b57806367ab845b146101325780636a5387a81461015d578063d4d80a071461019a5761007b565b80630f36c6381461008057806327ed71881461009c5780632def6620146100c757806333587abf146100de575b600080fd5b61009a60048036038101906100959190610d81565b6101c3565b005b3480156100a857600080fd5b506100b16103f4565b6040516100be9190610de3565b60405180910390f35b3480156100d357600080fd5b506100dc6103fc565b005b3480156100ea57600080fd5b5061010560048036038101906101009190610e5c565b61073c565b6040516101129190610fa8565b60405180910390f35b34801561012757600080fd5b5061013061085f565b005b34801561013e57600080fd5b506101476109c8565b6040516101549190610de3565b60405180910390f35b34801561016957600080fd5b50610184600480360381019061017f9190610e5c565b6109cd565b6040516101919190610fd9565b60405180910390f35b3480156101a657600080fd5b506101c160048036038101906101bc91906110e6565b610a25565b005b6000346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015461021291906111bc565b90506305f5e10081101561025b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102529061124d565b60405180910390fd5b816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000190816102a99190611479565b50806000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018190555060008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002018190555061034033610b47565b156103a05760016000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160006101000a81548160ff0219169083151502179055505b3373ffffffffffffffffffffffffffffffffffffffff167f2e6a62283ed761c959aaa67da7e98c90c08118cadc35aae3c7b9d0b258a5440583836040516103e8929190611584565b60405180910390a25050565b6305f5e10081565b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015403610480576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047790611600565b60405180910390fd5b60056000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154426104cf9190611620565b1015610510576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610507906116c6565b60405180910390fd5b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001805461055e9061129c565b80601f016020809104026020016040519081016040528092919081815260200182805461058a9061129c565b80156105d75780601f106105ac576101008083540402835291602001916105d7565b820191906000526020600020905b8154815290600101906020018083116105ba57829003601f168201915b5050505050905060008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015490506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600080820160006106739190610b99565b6001820160009055600282016000905560038201600090556004820160006101000a81549060ff021916905550503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156106e7573d6000803e3d6000fd5b503373ffffffffffffffffffffffffffffffffffffffff167f2e6a62283ed761c959aaa67da7e98c90c08118cadc35aae3c7b9d0b258a544058383604051610730929190611584565b60405180910390a25050565b610744610bd9565b6000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060a001604052908160008201805461079d9061129c565b80601f01602080910402602001604051908101604052809291908181526020018280546107c99061129c565b80156108165780601f106107eb57610100808354040283529160200191610816565b820191906000526020600020905b8154815290600101906020018083116107f957829003601f168201915b505050505081526020016001820154815260200160028201548152602001600382015481526020016004820160009054906101000a900460ff1615151515815250509050919050565b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154036108e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108da90611600565b60405180910390fd5b426000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002018190555060008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160006101000a81548160ff0219169083151502179055503373ffffffffffffffffffffffffffffffffffffffff167f93e5347bfe24301285595924ebe1940d4d0bce1c95b212d44fcf6ec4c0f2c14560405160405180910390a2565b600581565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160009054906101000a900460ff169050919050565b60016000808773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003016000828254610a7791906111bc565b92505081905550610a8785610b47565b158015610adf57506000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160009054906101000a900460ff165b15610b3f5760008060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040160006101000a81548160ff0219169083151502179055505b505050505050565b60006305f5e1006000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015410159050919050565b508054610ba59061129c565b6000825580601f10610bb75750610bd6565b601f016020900490600052602060002090810190610bd59190610c0a565b5b50565b6040518060a00160405280606081526020016000815260200160008152602001600081526020016000151581525090565b5b80821115610c23576000816000905550600101610c0b565b5090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610c8e82610c45565b810181811067ffffffffffffffff82111715610cad57610cac610c56565b5b80604052505050565b6000610cc0610c27565b9050610ccc8282610c85565b919050565b600067ffffffffffffffff821115610cec57610ceb610c56565b5b610cf582610c45565b9050602081019050919050565b82818337600083830152505050565b6000610d24610d1f84610cd1565b610cb6565b905082815260208101848484011115610d4057610d3f610c40565b5b610d4b848285610d02565b509392505050565b600082601f830112610d6857610d67610c3b565b5b8135610d78848260208601610d11565b91505092915050565b600060208284031215610d9757610d96610c31565b5b600082013567ffffffffffffffff811115610db557610db4610c36565b5b610dc184828501610d53565b91505092915050565b6000819050919050565b610ddd81610dca565b82525050565b6000602082019050610df86000830184610dd4565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610e2982610dfe565b9050919050565b610e3981610e1e565b8114610e4457600080fd5b50565b600081359050610e5681610e30565b92915050565b600060208284031215610e7257610e71610c31565b5b6000610e8084828501610e47565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610ec3578082015181840152602081019050610ea8565b60008484015250505050565b6000610eda82610e89565b610ee48185610e94565b9350610ef4818560208601610ea5565b610efd81610c45565b840191505092915050565b610f1181610dca565b82525050565b60008115159050919050565b610f2c81610f17565b82525050565b600060a0830160008301518482036000860152610f4f8282610ecf565b9150506020830151610f646020860182610f08565b506040830151610f776040860182610f08565b506060830151610f8a6060860182610f08565b506080830151610f9d6080860182610f23565b508091505092915050565b60006020820190508181036000830152610fc28184610f32565b905092915050565b610fd381610f17565b82525050565b6000602082019050610fee6000830184610fca565b92915050565b600063ffffffff82169050919050565b61100d81610ff4565b811461101857600080fd5b50565b60008135905061102a81611004565b92915050565b600080fd5b600080fd5b60008083601f8401126110505761104f610c3b565b5b8235905067ffffffffffffffff81111561106d5761106c611030565b5b60208301915083602082028301111561108957611088611035565b5b9250929050565b60008083601f8401126110a6576110a5610c3b565b5b8235905067ffffffffffffffff8111156110c3576110c2611030565b5b6020830191508360018202830111156110df576110de611035565b5b9250929050565b6000806000806000806080878903121561110357611102610c31565b5b600061111189828a0161101b565b965050602061112289828a01610e47565b955050604087013567ffffffffffffffff81111561114357611142610c36565b5b61114f89828a0161103a565b9450945050606087013567ffffffffffffffff81111561117257611171610c36565b5b61117e89828a01611090565b92509250509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006111c782610dca565b91506111d283610dca565b92508282019050808211156111ea576111e961118d565b5b92915050565b600082825260208201905092915050565b7f496e73756666696369656e74207374616b6520616d6f756e7400000000000000600082015250565b60006112376019836111f0565b915061124282611201565b602082019050919050565b600060208201905081810360008301526112668161122a565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806112b457607f821691505b6020821081036112c7576112c661126d565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830261132f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826112f2565b61133986836112f2565b95508019841693508086168417925050509392505050565b6000819050919050565b600061137661137161136c84610dca565b611351565b610dca565b9050919050565b6000819050919050565b6113908361135b565b6113a461139c8261137d565b8484546112ff565b825550505050565b600090565b6113b96113ac565b6113c4818484611387565b505050565b5b818110156113e8576113dd6000826113b1565b6001810190506113ca565b5050565b601f82111561142d576113fe816112cd565b611407846112e2565b81016020851015611416578190505b61142a611422856112e2565b8301826113c9565b50505b505050565b600082821c905092915050565b600061145060001984600802611432565b1980831691505092915050565b6000611469838361143f565b9150826002028217905092915050565b61148282610e89565b67ffffffffffffffff81111561149b5761149a610c56565b5b6114a5825461129c565b6114b08282856113ec565b600060209050601f8311600181146114e357600084156114d1578287015190505b6114db858261145d565b865550611543565b601f1984166114f1866112cd565b60005b82811015611519578489015182556001820191506020850194506020810190506114f4565b868310156115365784890151611532601f89168261143f565b8355505b6001600288020188555050505b505050505050565b600061155682610e89565b61156081856111f0565b9350611570818560208601610ea5565b61157981610c45565b840191505092915050565b6000604082019050818103600083015261159e818561154b565b90506115ad6020830184610dd4565b9392505050565b7f426c6f636b206275696c646572206e6f7420666f756e64000000000000000000600082015250565b60006115ea6017836111f0565b91506115f5826115b4565b602082019050919050565b60006020820190508181036000830152611619816115dd565b9050919050565b600061162b82610dca565b915061163683610dca565b925082820390508181111561164e5761164d61118d565b5b92915050565b7f43616e6e6f7420756e7374616b652077697468696e206f6e6520646179206f6660008201527f20746865206c61737420626c6f636b207375626d697373696f6e000000000000602082015250565b60006116b0603a836111f0565b91506116bb82611654565b604082019050919050565b600060208201905081810360008301526116df816116a3565b905091905056fea26469706673582212200615def7bd799e2e14fffd229d17624d5ee7b6d23281bb9941486d86d835c6e664736f6c63430008140033";

type BlockBuilderRegistryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BlockBuilderRegistryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BlockBuilderRegistry__factory extends ContractFactory {
  constructor(...args: BlockBuilderRegistryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<BlockBuilderRegistry> {
    return super.deploy(overrides || {}) as Promise<BlockBuilderRegistry>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): BlockBuilderRegistry {
    return super.attach(address) as BlockBuilderRegistry;
  }
  override connect(signer: Signer): BlockBuilderRegistry__factory {
    return super.connect(signer) as BlockBuilderRegistry__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BlockBuilderRegistryInterface {
    return new utils.Interface(_abi) as BlockBuilderRegistryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BlockBuilderRegistry {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as BlockBuilderRegistry;
  }
}
