/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  Withdrawal,
  WithdrawalInterface,
} from "../../../contracts/rollup/Withdrawal";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "blockHash",
        type: "bytes32",
      },
    ],
    name: "BlockHashNotExists",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidInitialization",
    type: "error",
  },
  {
    inputs: [],
    name: "NotInitializing",
    type: "error",
  },
  {
    inputs: [],
    name: "WithdrawalAggregatorMismatch",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "requestIndex",
        type: "uint256",
      },
    ],
    name: "WithdrawalBlockHashNotPosted",
    type: "error",
  },
  {
    inputs: [],
    name: "WithdrawalChainVerificationFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "WithdrawalProofVerificationFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "WithdrawalsHashMismatch",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "recipient",
            type: "address",
          },
          {
            internalType: "uint32",
            name: "tokenIndex",
            type: "uint32",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "nullifier",
            type: "bytes32",
          },
        ],
        indexed: false,
        internalType: "struct WithdrawalLib.Withdrawal",
        name: "withdrawal",
        type: "tuple",
      },
    ],
    name: "ClaimableWithdrawalQueued",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "recipient",
            type: "address",
          },
          {
            internalType: "uint32",
            name: "tokenIndex",
            type: "uint32",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "nullifier",
            type: "bytes32",
          },
        ],
        indexed: false,
        internalType: "struct WithdrawalLib.Withdrawal",
        name: "withdrawal",
        type: "tuple",
      },
    ],
    name: "DirectWithdrawalQueued",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint64",
        name: "version",
        type: "uint64",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "prevWithdrawalHash",
            type: "bytes32",
          },
          {
            internalType: "address",
            name: "recipient",
            type: "address",
          },
          {
            internalType: "uint32",
            name: "tokenIndex",
            type: "uint32",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "nullifier",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "blockHash",
            type: "bytes32",
          },
        ],
        internalType: "struct ChainedWithdrawalLib.ChainedWithdrawal[]",
        name: "withdrawals",
        type: "tuple[]",
      },
      {
        components: [
          {
            internalType: "bytes32",
            name: "lastWithdrawalHash",
            type: "bytes32",
          },
          {
            internalType: "address",
            name: "withdrawalAggregator",
            type: "address",
          },
        ],
        internalType:
          "struct WithdrawalProofPublicInputsLib.WithdrawalProofPublicInputs",
        name: "publicInputs",
        type: "tuple",
      },
      {
        internalType: "bytes",
        name: "proof",
        type: "bytes",
      },
    ],
    name: "postWithdrawal",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "postedBlockHashes",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "relayClaimableWithdrawals",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "relayDirectWithdrawals",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50611b24806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80631f8f9c51146100515780636792f87a14610081578063c57ca9151461009d578063e4f03798146100a7575b600080fd5b61006b60048036038101906100669190610e1b565b6100b1565b6040516100789190610e61565b60405180910390f35b61009b60048036038101906100969190610f5b565b6100c9565b005b6100a56105b1565b005b6100af6107ed565b005b60056020528060005260406000206000915090505481565b61013683600001358686808060200260200160405190810160405280939291908181526020016000905b8282101561012357848483905060c0020180360381019061011491906111e7565b815260200190600101906100f3565b5050505050610b2390919063ffffffff16565b61016c576040517ffbf63aef00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610174610ba5565b73ffffffffffffffffffffffffffffffffffffffff1683602001602081019061019d9190611214565b73ffffffffffffffffffffffffffffffffffffffff16146101ea576040517fbe8e6d9600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637e4f7a8a838361024b610246888036038101906102419190611291565b610bad565b610be7565b6040518463ffffffff1660e01b8152600401610269939291906113c9565b602060405180830381865afa158015610286573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102aa919061143a565b6102e0576040517f38a3efc400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b858590508110156105a957600086868381811061030357610302611467565b5b905060c0020180360381019061031991906111e7565b90506000600560008360a001518152602001908152602001600020540361037b578060a001516040517f631b89b000000000000000000000000000000000000000000000000000000000815260040161037291906114a5565b60405180910390fd5b60011515600260008360800151815260200190815260200160002060009054906101000a900460ff161515036103b1575061059c565b6001600260008360800151815260200190815260200160002060006101000a81548160ff02191690831515021790555060006040518060800160405280836020015173ffffffffffffffffffffffffffffffffffffffff168152602001836040015163ffffffff168152602001836060015181526020018360800151815250905061043f8260400151610c92565b1561053057600081908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548163ffffffff021916908363ffffffff160217905550604082015181600101556060820151816002015550507fd9106442c97b764fa4070229c5167ea28888d90803d276b9d3d6461296945cee816040516105239190611542565b60405180910390a1610599565b600161053b82610cb5565b90806001815401808255809150506001900390600052602060002001600090919091909150557fb9a024ce5233e25c9dc00bd86bd8a44865c4e021660d4d11bf81ee1454324fa7816040516105909190611542565b60405180910390a15b50505b80806001019150506102e3565b505050505050565b600060018054905090506000606482116105cb57816105ce565b60645b905060008167ffffffffffffffff8111156105ec576105eb611006565b5b60405190808252806020026020018201604052801561061a5781602001602082028036833780820191505090505b50905060005b828110156106aa57600180808054905061063a919061158c565b8154811061064b5761064a611467565b5b906000526020600020015482828151811061066957610668611467565b5b6020026020010181815250506001805480610687576106866115c0565b5b600190038181906000526020600020016000905590558080600101915050610620565b50600063a6e2c3c060e01b826040516024016106c6919061169e565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635f7b15776000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000856000610795610ba5565b6040518763ffffffff1660e01b81526004016107b5959493929190611782565b6000604051808303818588803b1580156107ce57600080fd5b505af11580156107e2573d6000803e3d6000fd5b505050505050505050565b6000808054905090506000601482116108065781610809565b60145b905060008167ffffffffffffffff81111561082757610826611006565b5b60405190808252806020026020018201604052801561086057816020015b61084d610d8a565b8152602001906001900390816108455790505b50905060005b828110156109e05760006001600080549050610882919061158c565b8154811061089357610892611467565b5b90600052602060002090600302016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016001820154815260200160028201548152505082828151811061094f5761094e611467565b5b6020026020010181905250600080548061096c5761096b6115c0565b5b6001900381819060005260206000209060030201600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000820160146101000a81549063ffffffff021916905560018201600090556002820160009055505090558080600101915050610866565b50600063aafaed3a60e01b826040516024016109fc91906118e0565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635f7b15776000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000856000610acb610ba5565b6040518763ffffffff1660e01b8152600401610aeb959493929190611782565b6000604051808303818588803b158015610b0457600080fd5b505af1158015610b18573d6000803e3d6000fd5b505050505050505050565b6000806000801b905060005b8451811015610b87576000858281518110610b4d57610b4c611467565b5b6020026020010151905082816000015114610b6e5760009350505050610b9f565b610b7781610cfb565b9250508080600101915050610b2f565b50828114610b99576000915050610b9f565b60019150505b92915050565b600033905090565b600081600001518260200151604051602001610bca92919061196b565b604051602081830303815290604052805190602001209050919050565b60606000600867ffffffffffffffff811115610c0657610c05611006565b5b604051908082528060200260200182016040528015610c345781602001602082028036833780820191505090505b50905060005b6008811015610c8857602081610c509190611997565b84901b60e01c63ffffffff16828281518110610c6f57610c6e611467565b5b6020026020010181815250508080600101915050610c3a565b5080915050919050565b6000610cae8263ffffffff166003610d4d90919063ffffffff16565b9050919050565b60008160000151826020015183604001518460600151604051602001610cde9493929190611a30565b604051602081830303815290604052805190602001209050919050565b6000816000015182602001518360400151846060015185608001518660a00151604051602001610d3096959493929190611a7e565b604051602081830303815290604052805190602001209050919050565b6000610d5f836000018360001b610d67565b905092915050565b600080836001016000848152602001908152602001600020541415905092915050565b6040518060800160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600063ffffffff16815260200160008152602001600080191681525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610df881610de5565b8114610e0357600080fd5b50565b600081359050610e1581610def565b92915050565b600060208284031215610e3157610e30610ddb565b5b6000610e3f84828501610e06565b91505092915050565b6000819050919050565b610e5b81610e48565b82525050565b6000602082019050610e766000830184610e52565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610ea157610ea0610e7c565b5b8235905067ffffffffffffffff811115610ebe57610ebd610e81565b5b6020830191508360c0820283011115610eda57610ed9610e86565b5b9250929050565b600080fd5b600060408284031215610efc57610efb610ee1565b5b81905092915050565b60008083601f840112610f1b57610f1a610e7c565b5b8235905067ffffffffffffffff811115610f3857610f37610e81565b5b602083019150836001820283011115610f5457610f53610e86565b5b9250929050565b600080600080600060808688031215610f7757610f76610ddb565b5b600086013567ffffffffffffffff811115610f9557610f94610de0565b5b610fa188828901610e8b565b95509550506020610fb488828901610ee6565b935050606086013567ffffffffffffffff811115610fd557610fd4610de0565b5b610fe188828901610f05565b92509250509295509295909350565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61103e82610ff5565b810181811067ffffffffffffffff8211171561105d5761105c611006565b5b80604052505050565b6000611070610dd1565b905061107c8282611035565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006110ac82611081565b9050919050565b6110bc816110a1565b81146110c757600080fd5b50565b6000813590506110d9816110b3565b92915050565b600063ffffffff82169050919050565b6110f8816110df565b811461110357600080fd5b50565b600081359050611115816110ef565b92915050565b61112481610e48565b811461112f57600080fd5b50565b6000813590506111418161111b565b92915050565b600060c0828403121561115d5761115c610ff0565b5b61116760c0611066565b9050600061117784828501610e06565b600083015250602061118b848285016110ca565b602083015250604061119f84828501611106565b60408301525060606111b384828501611132565b60608301525060806111c784828501610e06565b60808301525060a06111db84828501610e06565b60a08301525092915050565b600060c082840312156111fd576111fc610ddb565b5b600061120b84828501611147565b91505092915050565b60006020828403121561122a57611229610ddb565b5b6000611238848285016110ca565b91505092915050565b60006040828403121561125757611256610ff0565b5b6112616040611066565b9050600061127184828501610e06565b6000830152506020611285848285016110ca565b60208301525092915050565b6000604082840312156112a7576112a6610ddb565b5b60006112b584828501611241565b91505092915050565b600082825260208201905092915050565b82818337600083830152505050565b60006112ea83856112be565b93506112f78385846112cf565b61130083610ff5565b840190509392505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61134081610e48565b82525050565b60006113528383611337565b60208301905092915050565b6000602082019050919050565b60006113768261130b565b6113808185611316565b935061138b83611327565b8060005b838110156113bc5781516113a38882611346565b97506113ae8361135e565b92505060018101905061138f565b5085935050505092915050565b600060408201905081810360008301526113e48185876112de565b905081810360208301526113f8818461136b565b9050949350505050565b60008115159050919050565b61141781611402565b811461142257600080fd5b50565b6000815190506114348161140e565b92915050565b6000602082840312156114505761144f610ddb565b5b600061145e84828501611425565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b61149f81610de5565b82525050565b60006020820190506114ba6000830184611496565b92915050565b6114c9816110a1565b82525050565b6114d8816110df565b82525050565b6114e781610de5565b82525050565b60808201600082015161150360008501826114c0565b50602082015161151660208501826114cf565b5060408201516115296040850182611337565b50606082015161153c60608501826114de565b50505050565b600060808201905061155760008301846114ed565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061159782610e48565b91506115a283610e48565b92508282039050818111156115ba576115b961155d565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600061162783836114de565b60208301905092915050565b6000602082019050919050565b600061164b826115ef565b61165581856115fa565b93506116608361160b565b8060005b83811015611691578151611678888261161b565b975061168383611633565b925050600181019050611664565b5085935050505092915050565b600060208201905081810360008301526116b88184611640565b905092915050565b6116c9816110a1565b82525050565b6000819050919050565b6000819050919050565b60006116fe6116f96116f4846116cf565b6116d9565b610e48565b9050919050565b61170e816116e3565b82525050565b600081519050919050565b60005b8381101561173d578082015181840152602081019050611722565b60008484015250505050565b600061175482611714565b61175e81856112be565b935061176e81856020860161171f565b61177781610ff5565b840191505092915050565b600060a08201905061179760008301886116c0565b6117a46020830187611705565b81810360408301526117b68186611749565b90506117c56060830185611705565b6117d260808301846116c0565b9695505050505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60808201600082015161181e60008501826114c0565b50602082015161183160208501826114cf565b5060408201516118446040850182611337565b50606082015161185760608501826114de565b50505050565b60006118698383611808565b60808301905092915050565b6000602082019050919050565b600061188d826117dc565b61189781856117e7565b93506118a2836117f8565b8060005b838110156118d35781516118ba888261185d565b97506118c583611875565b9250506001810190506118a6565b5085935050505092915050565b600060208201905081810360008301526118fa8184611882565b905092915050565b6000819050919050565b61191d61191882610de5565b611902565b82525050565b60008160601b9050919050565b600061193b82611923565b9050919050565b600061194d82611930565b9050919050565b611965611960826110a1565b611942565b82525050565b6000611977828561190c565b6020820191506119878284611954565b6014820191508190509392505050565b60006119a282610e48565b91506119ad83610e48565b92508282026119bb81610e48565b915082820484148315176119d2576119d161155d565b5b5092915050565b60008160e01b9050919050565b60006119f1826119d9565b9050919050565b611a09611a04826110df565b6119e6565b82525050565b6000819050919050565b611a2a611a2582610e48565b611a0f565b82525050565b6000611a3c8287611954565b601482019150611a4c82866119f8565b600482019150611a5c8285611a19565b602082019150611a6c828461190c565b60208201915081905095945050505050565b6000611a8a828961190c565b602082019150611a9a8288611954565b601482019150611aaa82876119f8565b600482019150611aba8286611a19565b602082019150611aca828561190c565b602082019150611ada828461190c565b60208201915081905097965050505050505056fea26469706673582212203f4914ba8d4eb33b6b8b7bfd0aab193341e4e1a1b96779795d49819ada5bba7d64736f6c63430008180033";

type WithdrawalConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: WithdrawalConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Withdrawal__factory extends ContractFactory {
  constructor(...args: WithdrawalConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      Withdrawal & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Withdrawal__factory {
    return super.connect(runner) as Withdrawal__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): WithdrawalInterface {
    return new Interface(_abi) as WithdrawalInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Withdrawal {
    return new Contract(address, _abi, runner) as unknown as Withdrawal;
  }
}
