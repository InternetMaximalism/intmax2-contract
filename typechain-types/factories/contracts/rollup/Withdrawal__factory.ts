/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  Withdrawal,
  WithdrawalInterface,
} from "../../../contracts/rollup/Withdrawal";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "blockHash",
        type: "bytes32",
      },
    ],
    name: "BlockHashNotExists",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidInitialization",
    type: "error",
  },
  {
    inputs: [],
    name: "NotInitializing",
    type: "error",
  },
  {
    inputs: [],
    name: "WithdrawalAggregatorMismatch",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "requestIndex",
        type: "uint256",
      },
    ],
    name: "WithdrawalBlockHashNotPosted",
    type: "error",
  },
  {
    inputs: [],
    name: "WithdrawalChainVerificationFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "WithdrawalProofVerificationFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "WithdrawalsHashMismatch",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "recipient",
            type: "address",
          },
          {
            internalType: "uint32",
            name: "tokenIndex",
            type: "uint32",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "nullifier",
            type: "bytes32",
          },
        ],
        indexed: false,
        internalType: "struct WithdrawalLib.Withdrawal",
        name: "withdrawal",
        type: "tuple",
      },
    ],
    name: "ClaimableWithdrawalQueued",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "recipient",
            type: "address",
          },
          {
            internalType: "uint32",
            name: "tokenIndex",
            type: "uint32",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "nullifier",
            type: "bytes32",
          },
        ],
        indexed: false,
        internalType: "struct WithdrawalLib.Withdrawal",
        name: "withdrawal",
        type: "tuple",
      },
    ],
    name: "DirectWithdrawalQueued",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint64",
        name: "version",
        type: "uint64",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "recipient",
            type: "address",
          },
          {
            internalType: "uint32",
            name: "tokenIndex",
            type: "uint32",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "nullifier",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "blockHash",
            type: "bytes32",
          },
        ],
        internalType: "struct ChainedWithdrawalLib.ChainedWithdrawal[]",
        name: "withdrawals",
        type: "tuple[]",
      },
      {
        components: [
          {
            internalType: "bytes32",
            name: "lastWithdrawalHash",
            type: "bytes32",
          },
          {
            internalType: "address",
            name: "withdrawalAggregator",
            type: "address",
          },
        ],
        internalType:
          "struct WithdrawalProofPublicInputsLib.WithdrawalProofPublicInputs",
        name: "publicInputs",
        type: "tuple",
      },
      {
        internalType: "bytes",
        name: "proof",
        type: "bytes",
      },
    ],
    name: "postWithdrawal",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "postedBlockHashes",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "relayClaimableWithdrawals",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "relayDirectWithdrawals",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50611af7806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80631f8f9c51146100515780632340cd5814610081578063c57ca9151461009d578063e4f03798146100a7575b600080fd5b61006b60048036038101906100669190610e02565b6100b1565b6040516100789190610e48565b60405180910390f35b61009b60048036038101906100969190610f42565b6100c9565b005b6100a56105b1565b005b6100af6107ed565b005b60056020528060005260406000206000915090505481565b61013683600001358686808060200260200160405190810160405280939291908181526020016000905b8282101561012357848483905060a0020180360381019061011491906111ba565b815260200190600101906100f3565b5050505050610b2390919063ffffffff16565b61016c576040517ffbf63aef00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610174610b8f565b73ffffffffffffffffffffffffffffffffffffffff1683602001602081019061019d91906111e7565b73ffffffffffffffffffffffffffffffffffffffff16146101ea576040517fbe8e6d9600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637e4f7a8a838361024b610246888036038101906102419190611264565b610b97565b610bd1565b6040518463ffffffff1660e01b81526004016102699392919061139c565b602060405180830381865afa158015610286573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102aa919061140d565b6102e0576040517f38a3efc400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b858590508110156105a95760008686838181106103035761030261143a565b5b905060a0020180360381019061031991906111ba565b905060006005600083608001518152602001908152602001600020540361037b5780608001516040517f631b89b00000000000000000000000000000000000000000000000000000000081526004016103729190611478565b60405180910390fd5b60011515600260008360600151815260200190815260200160002060009054906101000a900460ff161515036103b1575061059c565b6001600260008360600151815260200190815260200160002060006101000a81548160ff02191690831515021790555060006040518060800160405280836000015173ffffffffffffffffffffffffffffffffffffffff168152602001836020015163ffffffff168152602001836040015181526020018360600151815250905061043f8260200151610c7c565b1561053057600081908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548163ffffffff021916908363ffffffff160217905550604082015181600101556060820151816002015550507fd9106442c97b764fa4070229c5167ea28888d90803d276b9d3d6461296945cee816040516105239190611515565b60405180910390a1610599565b600161053b82610c9f565b90806001815401808255809150506001900390600052602060002001600090919091909150557fb9a024ce5233e25c9dc00bd86bd8a44865c4e021660d4d11bf81ee1454324fa7816040516105909190611515565b60405180910390a15b50505b80806001019150506102e3565b505050505050565b600060018054905090506000606482116105cb57816105ce565b60645b905060008167ffffffffffffffff8111156105ec576105eb610fed565b5b60405190808252806020026020018201604052801561061a5781602001602082028036833780820191505090505b50905060005b828110156106aa57600180808054905061063a919061155f565b8154811061064b5761064a61143a565b5b90600052602060002001548282815181106106695761066861143a565b5b602002602001018181525050600180548061068757610686611593565b5b600190038181906000526020600020016000905590558080600101915050610620565b50600063a6e2c3c060e01b826040516024016106c69190611671565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635f7b15776000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000856000610795610b8f565b6040518763ffffffff1660e01b81526004016107b5959493929190611755565b6000604051808303818588803b1580156107ce57600080fd5b505af11580156107e2573d6000803e3d6000fd5b505050505050505050565b6000808054905090506000601482116108065781610809565b60145b905060008167ffffffffffffffff81111561082757610826610fed565b5b60405190808252806020026020018201604052801561086057816020015b61084d610d71565b8152602001906001900390816108455790505b50905060005b828110156109e05760006001600080549050610882919061155f565b815481106108935761089261143a565b5b90600052602060002090600302016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900463ffffffff1663ffffffff1663ffffffff1681526020016001820154815260200160028201548152505082828151811061094f5761094e61143a565b5b6020026020010181905250600080548061096c5761096b611593565b5b6001900381819060005260206000209060030201600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000820160146101000a81549063ffffffff021916905560018201600090556002820160009055505090558080600101915050610866565b50600063aafaed3a60e01b826040516024016109fc91906118b3565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509050600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635f7b15776000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000856000610acb610b8f565b6040518763ffffffff1660e01b8152600401610aeb959493929190611755565b6000604051808303818588803b158015610b0457600080fd5b505af1158015610b18573d6000803e3d6000fd5b505050505050505050565b6000806000801b905060005b8451811015610b71576000858281518110610b4d57610b4c61143a565b5b60200260200101519050610b618184610ce5565b9250508080600101915050610b2f565b50828114610b83576000915050610b89565b60019150505b92915050565b600033905090565b600081600001518260200151604051602001610bb492919061193e565b604051602081830303815290604052805190602001209050919050565b60606000600867ffffffffffffffff811115610bf057610bef610fed565b5b604051908082528060200260200182016040528015610c1e5781602001602082028036833780820191505090505b50905060005b6008811015610c7257602081610c3a919061196a565b84901b60e01c63ffffffff16828281518110610c5957610c5861143a565b5b6020026020010181815250508080600101915050610c24565b5080915050919050565b6000610c988263ffffffff166003610d3490919063ffffffff16565b9050919050565b60008160000151826020015183604001518460600151604051602001610cc89493929190611a03565b604051602081830303815290604052805190602001209050919050565b60008183600001518460200151856040015186606001518760800151604051602001610d1696959493929190611a51565b60405160208183030381529060405280519060200120905092915050565b6000610d46836000018360001b610d4e565b905092915050565b600080836001016000848152602001908152602001600020541415905092915050565b6040518060800160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600063ffffffff16815260200160008152602001600080191681525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610ddf81610dcc565b8114610dea57600080fd5b50565b600081359050610dfc81610dd6565b92915050565b600060208284031215610e1857610e17610dc2565b5b6000610e2684828501610ded565b91505092915050565b6000819050919050565b610e4281610e2f565b82525050565b6000602082019050610e5d6000830184610e39565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610e8857610e87610e63565b5b8235905067ffffffffffffffff811115610ea557610ea4610e68565b5b6020830191508360a0820283011115610ec157610ec0610e6d565b5b9250929050565b600080fd5b600060408284031215610ee357610ee2610ec8565b5b81905092915050565b60008083601f840112610f0257610f01610e63565b5b8235905067ffffffffffffffff811115610f1f57610f1e610e68565b5b602083019150836001820283011115610f3b57610f3a610e6d565b5b9250929050565b600080600080600060808688031215610f5e57610f5d610dc2565b5b600086013567ffffffffffffffff811115610f7c57610f7b610dc7565b5b610f8888828901610e72565b95509550506020610f9b88828901610ecd565b935050606086013567ffffffffffffffff811115610fbc57610fbb610dc7565b5b610fc888828901610eec565b92509250509295509295909350565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61102582610fdc565b810181811067ffffffffffffffff8211171561104457611043610fed565b5b80604052505050565b6000611057610db8565b9050611063828261101c565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061109382611068565b9050919050565b6110a381611088565b81146110ae57600080fd5b50565b6000813590506110c08161109a565b92915050565b600063ffffffff82169050919050565b6110df816110c6565b81146110ea57600080fd5b50565b6000813590506110fc816110d6565b92915050565b61110b81610e2f565b811461111657600080fd5b50565b60008135905061112881611102565b92915050565b600060a0828403121561114457611143610fd7565b5b61114e60a061104d565b9050600061115e848285016110b1565b6000830152506020611172848285016110ed565b602083015250604061118684828501611119565b604083015250606061119a84828501610ded565b60608301525060806111ae84828501610ded565b60808301525092915050565b600060a082840312156111d0576111cf610dc2565b5b60006111de8482850161112e565b91505092915050565b6000602082840312156111fd576111fc610dc2565b5b600061120b848285016110b1565b91505092915050565b60006040828403121561122a57611229610fd7565b5b611234604061104d565b9050600061124484828501610ded565b6000830152506020611258848285016110b1565b60208301525092915050565b60006040828403121561127a57611279610dc2565b5b600061128884828501611214565b91505092915050565b600082825260208201905092915050565b82818337600083830152505050565b60006112bd8385611291565b93506112ca8385846112a2565b6112d383610fdc565b840190509392505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b61131381610e2f565b82525050565b6000611325838361130a565b60208301905092915050565b6000602082019050919050565b6000611349826112de565b61135381856112e9565b935061135e836112fa565b8060005b8381101561138f5781516113768882611319565b975061138183611331565b925050600181019050611362565b5085935050505092915050565b600060408201905081810360008301526113b78185876112b1565b905081810360208301526113cb818461133e565b9050949350505050565b60008115159050919050565b6113ea816113d5565b81146113f557600080fd5b50565b600081519050611407816113e1565b92915050565b60006020828403121561142357611422610dc2565b5b6000611431848285016113f8565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b61147281610dcc565b82525050565b600060208201905061148d6000830184611469565b92915050565b61149c81611088565b82525050565b6114ab816110c6565b82525050565b6114ba81610dcc565b82525050565b6080820160008201516114d66000850182611493565b5060208201516114e960208501826114a2565b5060408201516114fc604085018261130a565b50606082015161150f60608501826114b1565b50505050565b600060808201905061152a60008301846114c0565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061156a82610e2f565b915061157583610e2f565b925082820390508181111561158d5761158c611530565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006115fa83836114b1565b60208301905092915050565b6000602082019050919050565b600061161e826115c2565b61162881856115cd565b9350611633836115de565b8060005b8381101561166457815161164b88826115ee565b975061165683611606565b925050600181019050611637565b5085935050505092915050565b6000602082019050818103600083015261168b8184611613565b905092915050565b61169c81611088565b82525050565b6000819050919050565b6000819050919050565b60006116d16116cc6116c7846116a2565b6116ac565b610e2f565b9050919050565b6116e1816116b6565b82525050565b600081519050919050565b60005b838110156117105780820151818401526020810190506116f5565b60008484015250505050565b6000611727826116e7565b6117318185611291565b93506117418185602086016116f2565b61174a81610fdc565b840191505092915050565b600060a08201905061176a6000830188611693565b61177760208301876116d8565b8181036040830152611789818661171c565b905061179860608301856116d8565b6117a56080830184611693565b9695505050505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6080820160008201516117f16000850182611493565b50602082015161180460208501826114a2565b506040820151611817604085018261130a565b50606082015161182a60608501826114b1565b50505050565b600061183c83836117db565b60808301905092915050565b6000602082019050919050565b6000611860826117af565b61186a81856117ba565b9350611875836117cb565b8060005b838110156118a657815161188d8882611830565b975061189883611848565b925050600181019050611879565b5085935050505092915050565b600060208201905081810360008301526118cd8184611855565b905092915050565b6000819050919050565b6118f06118eb82610dcc565b6118d5565b82525050565b60008160601b9050919050565b600061190e826118f6565b9050919050565b600061192082611903565b9050919050565b61193861193382611088565b611915565b82525050565b600061194a82856118df565b60208201915061195a8284611927565b6014820191508190509392505050565b600061197582610e2f565b915061198083610e2f565b925082820261198e81610e2f565b915082820484148315176119a5576119a4611530565b5b5092915050565b60008160e01b9050919050565b60006119c4826119ac565b9050919050565b6119dc6119d7826110c6565b6119b9565b82525050565b6000819050919050565b6119fd6119f882610e2f565b6119e2565b82525050565b6000611a0f8287611927565b601482019150611a1f82866119cb565b600482019150611a2f82856119ec565b602082019150611a3f82846118df565b60208201915081905095945050505050565b6000611a5d82896118df565b602082019150611a6d8288611927565b601482019150611a7d82876119cb565b600482019150611a8d82866119ec565b602082019150611a9d82856118df565b602082019150611aad82846118df565b60208201915081905097965050505050505056fea26469706673582212209b9ad14f76b428007dbafcedb02336044fd847e5b1e61cf8d562ae7ee70d02b164736f6c63430008180033";

type WithdrawalConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: WithdrawalConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Withdrawal__factory extends ContractFactory {
  constructor(...args: WithdrawalConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      Withdrawal & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Withdrawal__factory {
    return super.connect(runner) as Withdrawal__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): WithdrawalInterface {
    return new Interface(_abi) as WithdrawalInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Withdrawal {
    return new Contract(address, _abi, runner) as unknown as Withdrawal;
  }
}
