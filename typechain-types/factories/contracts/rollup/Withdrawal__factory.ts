/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  Withdrawal,
  WithdrawalInterface,
} from "../../../contracts/rollup/Withdrawal";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "blockHash",
        type: "bytes32",
      },
    ],
    name: "BlockHashNotExists",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidInitialization",
    type: "error",
  },
  {
    inputs: [],
    name: "NotInitializing",
    type: "error",
  },
  {
    inputs: [],
    name: "QueueIsEmpty",
    type: "error",
  },
  {
    inputs: [],
    name: "QueueIsEmpty",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "count",
        type: "uint256",
      },
    ],
    name: "TooManyRelayClaimableWithdrawals",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "count",
        type: "uint256",
      },
    ],
    name: "TooManyRelayDirectWithdrawals",
    type: "error",
  },
  {
    inputs: [],
    name: "WithdrawalAggregatorMismatch",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "requestIndex",
        type: "uint256",
      },
    ],
    name: "WithdrawalBlockHashNotPosted",
    type: "error",
  },
  {
    inputs: [],
    name: "WithdrawalChainVerificationFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "WithdrawalProofVerificationFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "WithdrawalsHashMismatch",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "address",
            name: "recipient",
            type: "address",
          },
          {
            internalType: "uint32",
            name: "tokenIndex",
            type: "uint32",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "nullifier",
            type: "bytes32",
          },
        ],
        indexed: false,
        internalType: "struct WithdrawalLib.Withdrawal",
        name: "withdrawal",
        type: "tuple",
      },
    ],
    name: "ClaimableWithdrawalQueued",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "address",
            name: "recipient",
            type: "address",
          },
          {
            internalType: "uint32",
            name: "tokenIndex",
            type: "uint32",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "nullifier",
            type: "bytes32",
          },
        ],
        indexed: false,
        internalType: "struct WithdrawalLib.Withdrawal",
        name: "withdrawal",
        type: "tuple",
      },
    ],
    name: "DirectWithdrawalQueued",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint64",
        name: "version",
        type: "uint64",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "recipient",
            type: "address",
          },
          {
            internalType: "uint32",
            name: "tokenIndex",
            type: "uint32",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "nullifier",
            type: "bytes32",
          },
          {
            internalType: "bytes32",
            name: "blockHash",
            type: "bytes32",
          },
        ],
        internalType: "struct ChainedWithdrawalLib.ChainedWithdrawal[]",
        name: "withdrawals",
        type: "tuple[]",
      },
      {
        components: [
          {
            internalType: "bytes32",
            name: "lastWithdrawalHash",
            type: "bytes32",
          },
          {
            internalType: "address",
            name: "withdrawalAggregator",
            type: "address",
          },
        ],
        internalType:
          "struct WithdrawalProofPublicInputsLib.WithdrawalProofPublicInputs",
        name: "publicInputs",
        type: "tuple",
      },
      {
        internalType: "bytes",
        name: "proof",
        type: "bytes",
      },
    ],
    name: "postWithdrawal",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "postedBlockHashes",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "processUpToId",
        type: "uint256",
      },
    ],
    name: "relayClaimableWithdrawals",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "processUpToId",
        type: "uint256",
      },
    ],
    name: "relayDirectWithdrawals",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50611b97806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80631f8f9c51146100515780632340cd58146100815780632b8d1b5c1461009d57806338d78c78146100b9575b600080fd5b61006b60048036038101906100669190610e78565b6100d5565b6040516100789190610ebe565b60405180910390f35b61009b60048036038101906100969190610fb8565b6100ed565b005b6100b760048036038101906100b29190611079565b6104a2565b005b6100d360048036038101906100ce9190611079565b61062b565b005b60096020528060005260406000206000915090505481565b61015a83600001358686808060200260200160405190810160405280939291908181526020016000905b8282101561014757848483905060a00201803603810190610138919061125d565b81526020019060010190610117565b50505050506107bd90919063ffffffff16565b610190576040517ffbf63aef00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610198610829565b73ffffffffffffffffffffffffffffffffffffffff168360200160208101906101c1919061128a565b5050600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637e4f7a8a838361022461021f8880360381019061021a9190611307565b610831565b61086b565b6040518463ffffffff1660e01b81526004016102429392919061143f565b602060405180830381865afa15801561025f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061028391906114b0565b6102b9576040517f38a3efc400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b8585905081101561049a5760008686838181106102dc576102db6114dd565b5b905060a002018036038101906102f2919061125d565b905060006009600083608001518152602001908152602001600020505060011515600660008360600151815260200190815260200160002060009054906101000a900460ff16151503610345575061048d565b6001600660008360600151815260200190815260200160002060006101000a81548160ff02191690831515021790555060006040518060800160405280836000015173ffffffffffffffffffffffffffffffffffffffff168152602001836020015163ffffffff16815260200183604001518152602001836060015181525090506103d38260200151610916565b1561042f5760006103ee82600061093990919063ffffffff16565b90507f0af6a8ebe64b057b7fcbff08dc274ee360a5ab420d71b826f44bec6d7054eb77818360405161042192919061158e565b60405180910390a15061048a565b600061044d61043d83610a14565b6003610a5a90919063ffffffff16565b90507fe11632f77dbd388725302b85b3a1557329e8be0f3207f6defdae78e229a38936818360405161048092919061158e565b60405180910390a1505b50505b80806001019150506102bc565b505050505050565b6003600201548111156104b85760036002015490505b6000600360010154826104cb91906115e6565b9050601481111561051357806040517f21a47f9e00000000000000000000000000000000000000000000000000000000815260040161050a9190610ebe565b60405180910390fd5b60008167ffffffffffffffff81111561052f5761052e6110bc565b5b60405190808252806020026020018201604052801561055d5781602001602082028036833780820191505090505b50905060005b828110156105a1576105756003610aae565b828281518110610588576105876114dd565b5b6020026020010181815250508080600101915050610563565b50600063a6e2c3c060e01b826040516024016105bd91906116c9565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050905061062581610b3c565b50505050565b6000600201548111156106415760006002015490505b600080600101548261065391906115e6565b9050601481111561069b57806040517f26ce64830000000000000000000000000000000000000000000000000000000081526004016106929190610ebe565b60405180910390fd5b60008167ffffffffffffffff8111156106b7576106b66110bc565b5b6040519080825280602002602001820160405280156106f057816020015b6106dd610de7565b8152602001906001900390816106d55790505b50905060005b82811015610733576107086000610c01565b82828151811061071b5761071a6114dd565b5b602002602001018190525080806001019150506106f6565b50600063a6e2c3c060e01b8260405160240161074f91906117ef565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505090506107b781610b3c565b50505050565b6000806000801b905060005b845181101561080b5760008582815181106107e7576107e66114dd565b5b602002602001015190506107fb8184610d33565b92505080806001019150506107c9565b5082811461081d576000915050610823565b60019150505b92915050565b600033905090565b60008160000151826020015160405160200161084e92919061187a565b604051602081830303815290604052805190602001209050919050565b60606000600867ffffffffffffffff81111561088a576108896110bc565b5b6040519080825280602002602001820160405280156108b85781602001602082028036833780820191505090505b50905060005b600881101561090c576020816108d491906118a6565b84901b60e01c63ffffffff168282815181106108f3576108f26114dd565b5b60200260200101818152505080806001019150506108be565b5080915050919050565b60006109328263ffffffff166007610d8290919063ffffffff16565b9050919050565b60008260000182908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548163ffffffff021916908363ffffffff1602179055506040820151816001015560608201518160020155505082600201549050826002016000815480929190610a09906118e8565b919050555092915050565b60008160000151826020015183604001518460600151604051602001610a3d9493929190611987565b604051602081830303815290604052805190602001209050919050565b60008260000182908060018154018082558091505060019003906000526020600020016000909190919091505582600201549050826002016000815480929190610aa3906118e8565b919050555092915050565b6000610ab982610d9c565b15610af0576040517f63c3654900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600082600001836001015481548110610b0c57610b0b6114dd565b5b90600052602060002001549050826001016000815480929190610b2e906118e8565b919050555080915050919050565b600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635f7b15776000600c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000856000610bac610829565b6040518763ffffffff1660e01b8152600401610bcc959493929190611a97565b6000604051808303818588803b158015610be557600080fd5b505af1158015610bf9573d6000803e3d6000fd5b505050505050565b610c09610de7565b610c1282610db0565b15610c49576040517f63c3654900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600082600001836001015481548110610c6557610c646114dd565b5b90600052602060002090600302016040518060800160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900463ffffffff1663ffffffff1663ffffffff168152602001600182015481526020016002820154815250509050826001016000815480929190610d25906118e8565b919050555080915050919050565b60008183600001518460200151856040015186606001518760800151604051602001610d6496959493929190611af1565b60405160208183030381529060405280519060200120905092915050565b6000610d94836000018360001b610dc4565b905092915050565b600081600201548260010154149050919050565b600081600201548260010154149050919050565b600080836001016000848152602001908152602001600020541415905092915050565b6040518060800160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600063ffffffff16815260200160008152602001600080191681525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610e5581610e42565b8114610e6057600080fd5b50565b600081359050610e7281610e4c565b92915050565b600060208284031215610e8e57610e8d610e38565b5b6000610e9c84828501610e63565b91505092915050565b6000819050919050565b610eb881610ea5565b82525050565b6000602082019050610ed36000830184610eaf565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610efe57610efd610ed9565b5b8235905067ffffffffffffffff811115610f1b57610f1a610ede565b5b6020830191508360a0820283011115610f3757610f36610ee3565b5b9250929050565b600080fd5b600060408284031215610f5957610f58610f3e565b5b81905092915050565b60008083601f840112610f7857610f77610ed9565b5b8235905067ffffffffffffffff811115610f9557610f94610ede565b5b602083019150836001820283011115610fb157610fb0610ee3565b5b9250929050565b600080600080600060808688031215610fd457610fd3610e38565b5b600086013567ffffffffffffffff811115610ff257610ff1610e3d565b5b610ffe88828901610ee8565b9550955050602061101188828901610f43565b935050606086013567ffffffffffffffff81111561103257611031610e3d565b5b61103e88828901610f62565b92509250509295509295909350565b61105681610ea5565b811461106157600080fd5b50565b6000813590506110738161104d565b92915050565b60006020828403121561108f5761108e610e38565b5b600061109d84828501611064565b91505092915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6110f4826110ab565b810181811067ffffffffffffffff82111715611113576111126110bc565b5b80604052505050565b6000611126610e2e565b905061113282826110eb565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061116282611137565b9050919050565b61117281611157565b811461117d57600080fd5b50565b60008135905061118f81611169565b92915050565b600063ffffffff82169050919050565b6111ae81611195565b81146111b957600080fd5b50565b6000813590506111cb816111a5565b92915050565b600060a082840312156111e7576111e66110a6565b5b6111f160a061111c565b9050600061120184828501611180565b6000830152506020611215848285016111bc565b602083015250604061122984828501611064565b604083015250606061123d84828501610e63565b606083015250608061125184828501610e63565b60808301525092915050565b600060a0828403121561127357611272610e38565b5b6000611281848285016111d1565b91505092915050565b6000602082840312156112a05761129f610e38565b5b60006112ae84828501611180565b91505092915050565b6000604082840312156112cd576112cc6110a6565b5b6112d7604061111c565b905060006112e784828501610e63565b60008301525060206112fb84828501611180565b60208301525092915050565b60006040828403121561131d5761131c610e38565b5b600061132b848285016112b7565b91505092915050565b600082825260208201905092915050565b82818337600083830152505050565b60006113608385611334565b935061136d838584611345565b611376836110ab565b840190509392505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6113b681610ea5565b82525050565b60006113c883836113ad565b60208301905092915050565b6000602082019050919050565b60006113ec82611381565b6113f6818561138c565b93506114018361139d565b8060005b8381101561143257815161141988826113bc565b9750611424836113d4565b925050600181019050611405565b5085935050505092915050565b6000604082019050818103600083015261145a818587611354565b9050818103602083015261146e81846113e1565b9050949350505050565b60008115159050919050565b61148d81611478565b811461149857600080fd5b50565b6000815190506114aa81611484565b92915050565b6000602082840312156114c6576114c5610e38565b5b60006114d48482850161149b565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b61151581611157565b82525050565b61152481611195565b82525050565b61153381610e42565b82525050565b60808201600082015161154f600085018261150c565b506020820151611562602085018261151b565b50604082015161157560408501826113ad565b506060820151611588606085018261152a565b50505050565b600060a0820190506115a36000830185610eaf565b6115b06020830184611539565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006115f182610ea5565b91506115fc83610ea5565b9250828203905081811115611614576116136115b7565b5b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6000611652838361152a565b60208301905092915050565b6000602082019050919050565b60006116768261161a565b6116808185611625565b935061168b83611636565b8060005b838110156116bc5781516116a38882611646565b97506116ae8361165e565b92505060018101905061168f565b5085935050505092915050565b600060208201905081810360008301526116e3818461166b565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60808201600082015161172d600085018261150c565b506020820151611740602085018261151b565b50604082015161175360408501826113ad565b506060820151611766606085018261152a565b50505050565b60006117788383611717565b60808301905092915050565b6000602082019050919050565b600061179c826116eb565b6117a681856116f6565b93506117b183611707565b8060005b838110156117e25781516117c9888261176c565b97506117d483611784565b9250506001810190506117b5565b5085935050505092915050565b600060208201905081810360008301526118098184611791565b905092915050565b6000819050919050565b61182c61182782610e42565b611811565b82525050565b60008160601b9050919050565b600061184a82611832565b9050919050565b600061185c8261183f565b9050919050565b61187461186f82611157565b611851565b82525050565b6000611886828561181b565b6020820191506118968284611863565b6014820191508190509392505050565b60006118b182610ea5565b91506118bc83610ea5565b92508282026118ca81610ea5565b915082820484148315176118e1576118e06115b7565b5b5092915050565b60006118f382610ea5565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611925576119246115b7565b5b600182019050919050565b60008160e01b9050919050565b600061194882611930565b9050919050565b61196061195b82611195565b61193d565b82525050565b6000819050919050565b61198161197c82610ea5565b611966565b82525050565b60006119938287611863565b6014820191506119a3828661194f565b6004820191506119b38285611970565b6020820191506119c3828461181b565b60208201915081905095945050505050565b6119de81611157565b82525050565b6000819050919050565b6000819050919050565b6000611a13611a0e611a09846119e4565b6119ee565b610ea5565b9050919050565b611a23816119f8565b82525050565b600081519050919050565b60005b83811015611a52578082015181840152602081019050611a37565b60008484015250505050565b6000611a6982611a29565b611a738185611334565b9350611a83818560208601611a34565b611a8c816110ab565b840191505092915050565b600060a082019050611aac60008301886119d5565b611ab96020830187611a1a565b8181036040830152611acb8186611a5e565b9050611ada6060830185611a1a565b611ae760808301846119d5565b9695505050505050565b6000611afd828961181b565b602082019150611b0d8288611863565b601482019150611b1d828761194f565b600482019150611b2d8286611970565b602082019150611b3d828561181b565b602082019150611b4d828461181b565b60208201915081905097965050505050505056fea26469706673582212202c2cc9bf09eb3e7d60b5aa10a9bf91bf64aba2bc4fdab3759d2c3465e6c804ab64736f6c63430008180033";

type WithdrawalConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: WithdrawalConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Withdrawal__factory extends ContractFactory {
  constructor(...args: WithdrawalConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      Withdrawal & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): Withdrawal__factory {
    return super.connect(runner) as Withdrawal__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): WithdrawalInterface {
    return new Interface(_abi) as WithdrawalInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): Withdrawal {
    return new Contract(address, _abi, runner) as unknown as Withdrawal;
  }
}
