/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { Liquidity, LiquidityInterface } from "../../contracts/Liquidity";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "scrollMessenger",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
    ],
    name: "AddressEmptyCode",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "AddressInsufficientBalance",
    type: "error",
  },
  {
    inputs: [],
    name: "FailedInnerCall",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    name: "SafeERC20FailedOperation",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "depositId",
        type: "uint256",
      },
    ],
    name: "DepositCanceled",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "depositId",
        type: "uint256",
      },
      {
        indexed: true,
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "recipientSaltHash",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "uint32",
        name: "tokenIndex",
        type: "uint32",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "requestedAt",
        type: "uint256",
      },
    ],
    name: "Deposited",
    type: "event",
  },
  {
    inputs: [],
    name: "_rollupContract",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "_scrollMessenger",
    outputs: [
      {
        internalType: "contract IScrollMessenger",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "depositId",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "bytes32",
            name: "recipientSaltHash",
            type: "bytes32",
          },
          {
            internalType: "uint32",
            name: "tokenIndex",
            type: "uint32",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
        ],
        internalType: "struct ILiquidity.Deposit",
        name: "deposit",
        type: "tuple",
      },
    ],
    name: "cancelPendingDeposit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "depositId",
        type: "uint256",
      },
      {
        components: [
          {
            internalType: "bytes32",
            name: "recipientSaltHash",
            type: "bytes32",
          },
          {
            internalType: "uint32",
            name: "tokenIndex",
            type: "uint32",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
        ],
        internalType: "struct ILiquidity.Deposit",
        name: "deposit",
        type: "tuple",
      },
    ],
    name: "claimRejectedDeposit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "recipientSaltHash",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "depositERC1155",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "recipientSaltHash",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "depositERC20",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "recipientSaltHash",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "depositERC721",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "recipientSaltHash",
        type: "bytes32",
      },
    ],
    name: "depositETH",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "getDepositCounter",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getLastAnalyzedDepositId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getLastProcessedDepositId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "depositId",
        type: "uint256",
      },
    ],
    name: "getPendingDeposit",
    outputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "depositHash",
            type: "bytes32",
          },
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "requestedAt",
            type: "uint256",
          },
        ],
        internalType: "struct ILiquidity.DepositData",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "depositId",
        type: "uint256",
      },
    ],
    name: "getRejectedDeposit",
    outputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "depositHash",
            type: "bytes32",
          },
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "requestedAt",
            type: "uint256",
          },
        ],
        internalType: "struct ILiquidity.DepositData",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum ILiquidity.TokenType",
        name: "tokenType",
        type: "uint8",
      },
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "getTokenIndex",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "tokenIndex",
        type: "uint32",
      },
    ],
    name: "getTokenInfo",
    outputs: [
      {
        components: [
          {
            internalType: "enum ILiquidity.TokenType",
            name: "tokenType",
            type: "uint8",
          },
          {
            internalType: "address",
            name: "tokenAddress",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "tokenId",
            type: "uint256",
          },
        ],
        internalType: "struct ILiquidity.TokenInfo",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "recipient",
            type: "address",
          },
          {
            internalType: "uint32",
            name: "tokenIndex",
            type: "uint32",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "salt",
            type: "bytes32",
          },
        ],
        internalType: "struct IRollup.Withdrawal[]",
        name: "withdrawals",
        type: "tuple[]",
      },
    ],
    name: "processWithdrawals",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "lastAnalyzedDepositId",
        type: "uint256",
      },
      {
        internalType: "uint256[]",
        name: "rejectedDepositIds",
        type: "uint256[]",
      },
    ],
    name: "rejectDeposits",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "lastProcessedDepositId",
        type: "uint256",
      },
    ],
    name: "submitDeposits",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newRollupContract",
        type: "address",
      },
    ],
    name: "updateRollupContract",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405260018060146101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060016006553480156200003f57600080fd5b5060405162002e0338038062002e0383398181016040528101906200006591906200032d565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506007604051806060016040528060006003811115620000c957620000c86200035f565b5b8152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000160006101000a81548160ff021916908360038111156200014757620001466200035f565b5b021790555060208201518160000160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816001015550506000600860008073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548163ffffffff021916908363ffffffff160217905550600260405180606001604052806000801b8152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090806001815401808255809150506001900390600052602060002090600302016000909190919091506000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550604082015181600201555050506200038e565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002f582620002c8565b9050919050565b6200030781620002e8565b81146200031357600080fd5b50565b6000815190506200032781620002fc565b92915050565b600060208284031215620003465762000345620002c3565b5b6000620003568482850162000316565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b612a65806200039e6000396000f3fe6080604052600436106101145760003560e01c80638492d225116100a0578063d28906c911610064578063d28906c914610399578063d68d9d4e146103c4578063d92b998a146103e0578063dd4d4e8914610409578063ebab8fe01461043457610114565b80638492d225146102b65780639e687587146102df5780639f401f5814610308578063aa8fc35b14610331578063cbd90cd01461035c57610114565b80634cde335c116100e75780634cde335c146101d1578063591ec1d21461020e5780636a49c47d146102375780636af5e3bd14610262578063788c2ecf1461028d57610114565b806308c5ca5c1461011957806326fc02dd14610142578063381175f61461016b5780634ac77977146101a8575b600080fd5b34801561012557600080fd5b50610140600480360381019061013b9190611ca3565b610471565b005b34801561014e57600080fd5b5061016960048036038101906101649190611d3c565b6104b5565b005b34801561017757600080fd5b50610192600480360381019061018d9190611dc8565b61055a565b60405161019f9190611e3a565b60405180910390f35b3480156101b457600080fd5b506101cf60048036038101906101ca9190611e55565b61067e565b005b3480156101dd57600080fd5b506101f860048036038101906101f39190611e55565b610688565b6040516102059190611ef1565b60405180910390f35b34801561021a57600080fd5b506102356004803603810190610230919061202d565b61072e565b005b34801561024357600080fd5b5061024c6108b5565b604051610259919061207c565b60405180910390f35b34801561026e57600080fd5b506102776108db565b60405161028491906120a6565b60405180910390f35b34801561029957600080fd5b506102b460048036038101906102af91906120c1565b6108e5565b005b3480156102c257600080fd5b506102dd60048036038101906102d8919061202d565b6109a4565b005b3480156102eb57600080fd5b5061030660048036038101906103019190612179565b610b49565b005b34801561031457600080fd5b5061032f600480360381019061032a91906120c1565b610b4d565b005b34801561033d57600080fd5b50610346610bdf565b6040516103539190612225565b60405180910390f35b34801561036857600080fd5b50610383600480360381019061037e9190612240565b610c03565b6040516103909190612326565b60405180910390f35b3480156103a557600080fd5b506103ae610ce0565b6040516103bb91906120a6565b60405180910390f35b6103de60048036038101906103d99190612341565b610d08565b005b3480156103ec57600080fd5b50610407600480360381019061040291906123c4565b610d18565b005b34801561041557600080fd5b5061041e610e74565b60405161042b91906120a6565b60405180910390f35b34801561044057600080fd5b5061045b60048036038101906104569190611e55565b610e7e565b6040516104689190611ef1565b60405180910390f35b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b8373ffffffffffffffffffffffffffffffffffffffff1663f242432a33308585604051806020016040528060008152506040518663ffffffff1660e01b81526004016105059594939291906124a3565b600060405180830381600087803b15801561051f57600080fd5b505af1158015610533573d6000803e3d6000fd5b50505050600061054560038685610f15565b905061055333858385611259565b5050505050565b600080600381111561056f5761056e61226d565b5b8460038111156105825761058161226d565b5b036105905760009050610677565b600160038111156105a4576105a361226d565b5b8460038111156105b7576105b661226d565b5b0361061357600860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900463ffffffff169050610677565b600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060009054906101000a900463ffffffff1690505b9392505050565b8060058190555050565b610690611bae565b600282815481106106a4576106a36124fd565b5b9060005260206000209060030201604051806060016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820154815250509050919050565b600060036000848152602001908152602001600020604051806060016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201548152505090503373ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff161461082c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610823906125af565b60405180910390fd5b600360008481526020019081526020016000206000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600282016000905550506108838183611478565b827f0c1c0787650562778c282502dfd6dcea2fb79d23783920aa18aee36b4aa3dc4860405160405180910390a2505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600454905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610954576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161094b9061261b565b60405180910390fd5b6109813330838673ffffffffffffffffffffffffffffffffffffffff1661181f909392919063ffffffff16565b60006109906001856000610f15565b905061099e33848385611259565b50505050565b6000600283815481106109ba576109b96124fd565b5b9060005260206000209060030201604051806060016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200160028201548152505090503373ffffffffffffffffffffffffffffffffffffffff16816020015173ffffffffffffffffffffffffffffffffffffffff1614610ab1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aa8906125af565b60405180910390fd5b60028381548110610ac557610ac46124fd565b5b90600052602060002090600302016000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560028201600090555050610b178183611478565b827f0c1c0787650562778c282502dfd6dcea2fb79d23783920aa18aee36b4aa3dc4860405160405180910390a2505050565b5050565b8273ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b8152600401610b8a9392919061263b565b600060405180830381600087803b158015610ba457600080fd5b505af1158015610bb8573d6000803e3d6000fd5b505050506000610bca60028584610f15565b9050610bd93384836001611259565b50505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b610c0b611be8565b60078263ffffffff1681548110610c2557610c246124fd565b5b90600052602060002090600202016040518060600160405290816000820160009054906101000a900460ff166003811115610c6357610c6261226d565b5b6003811115610c7557610c7461226d565b5b81526020016000820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815250509050919050565b6000600160149054906101000a900467ffffffffffffffff1667ffffffffffffffff16905090565b610d153382600034611259565b50565b8260048190555060005b82829050811015610e6e576000838383818110610d4257610d416124fd565b5b90506020020135905060028181548110610d5f57610d5e6124fd565b5b906000526020600020906003020160036000838152602001908152602001600020600082015481600001556001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff168160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506002820154816002015590505060028181548110610e1257610e116124fd565b5b90600052602060002090600302016000808201600090556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560028201600090555050508080610e66906126a1565b915050610d22565b50505050565b6000600554905090565b610e86611bae565b60036000838152602001908152602001600020604051806060016040529081600082015481526020016001820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016002820154815250509050919050565b6000806003811115610f2a57610f2961226d565b5b846003811115610f3d57610f3c61226d565b5b03610f4b5760009050611252565b6000600654905060016003811115610f6657610f6561226d565b5b856003811115610f7957610f7861226d565b5b036110d25760076040518060600160405280876003811115610f9e57610f9d61226d565b5b81526020018673ffffffffffffffffffffffffffffffffffffffff16815260200185815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000160006101000a81548160ff021916908360038111156110175761101661226d565b5b021790555060208201518160000160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160010155505080600860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548163ffffffff021916908363ffffffff160217905550611233565b600760405180606001604052808760038111156110f2576110f161226d565b5b81526020018673ffffffffffffffffffffffffffffffffffffffff16815260200185815250908060018154018082558091505060019003906000526020600020906002020160009091909190915060008201518160000160006101000a81548160ff0219169083600381111561116b5761116a61226d565b5b021790555060208201518160000160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160010155505080600960008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600085815260200190815260200160002060006101000a81548163ffffffff021916908363ffffffff1602179055505b60016006600082825461124691906126e9565b92505081905550809150505b9392505050565b67ffffffffffffffff8016600160149054906101000a900467ffffffffffffffff1667ffffffffffffffff16036112c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112bc90612769565b60405180910390fd5b6000600160149054906101000a900467ffffffffffffffff1667ffffffffffffffff16905060018060148282829054906101000a900467ffffffffffffffff1661130f919061279d565b92506101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550600061136060405180606001604052808781526020018663ffffffff168152602001858152506118a1565b9050600260405180606001604052808381526020018873ffffffffffffffffffffffffffffffffffffffff1681526020014281525090806001815401808255809150506001900390600052602060002090600302016000909190919091506000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506040820151816002015550508573ffffffffffffffffffffffffffffffffffffffff16827f1e88950eef3c1bd8dd83d765aec1f21f34ca153104f0acd7a6218bf8f48e84108787874260405161146894939291906127e8565b60405180910390a3505050505050565b6000801b8260000151036114c1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114b890612879565b60405180910390fd5b6114ca816118a1565b82600001511461150f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161150690612879565b60405180910390fd5b60006007826020015163ffffffff168154811061152f5761152e6124fd565b5b90600052602060002090600202016040518060600160405290816000820160009054906101000a900460ff16600381111561156d5761156c61226d565b5b600381111561157f5761157e61226d565b5b81526020016000820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016001820154815250509050600060038111156115f9576115f861226d565b5b816000015160038111156116105761160f61226d565b5b0361166957826020015173ffffffffffffffffffffffffffffffffffffffff166108fc83604001519081150290604051600060405180830381858888f19350505050158015611663573d6000803e3d6000fd5b5061181a565b6001600381111561167d5761167c61226d565b5b816000015160038111156116945761169361226d565b5b036116d5576116d083602001518360400151836020015173ffffffffffffffffffffffffffffffffffffffff166118e19092919063ffffffff16565b611819565b600260038111156116e9576116e861226d565b5b81600001516003811115611700576116ff61226d565b5b0361178557806020015173ffffffffffffffffffffffffffffffffffffffff166323b872dd30856020015184604001516040518463ffffffff1660e01b815260040161174e9392919061263b565b600060405180830381600087803b15801561176857600080fd5b505af115801561177c573d6000803e3d6000fd5b50505050611818565b806020015173ffffffffffffffffffffffffffffffffffffffff1663f242432a30856020015184604001518660400151604051806020016040528060008152506040518663ffffffff1660e01b81526004016117e59594939291906124a3565b600060405180830381600087803b1580156117ff57600080fd5b505af1158015611813573d6000803e3d6000fd5b505050505b5b5b505050565b61189b848573ffffffffffffffffffffffffffffffffffffffff166323b872dd8686866040516024016118549392919061263b565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611960565b50505050565b60008160000151826020015183604001516040516020016118c493929190612911565b604051602081830303815290604052805190602001209050919050565b61195b838473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb858560405160240161191492919061294e565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050611960565b505050565b600061198b828473ffffffffffffffffffffffffffffffffffffffff166119f790919063ffffffff16565b905060008151141580156119b05750808060200190518101906119ae91906129af565b155b156119f257826040517f5274afe70000000000000000000000000000000000000000000000000000000081526004016119e9919061207c565b60405180910390fd5b505050565b6060611a0583836000611a0d565b905092915050565b606081471015611a5457306040517fcd786059000000000000000000000000000000000000000000000000000000008152600401611a4b919061207c565b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff168486604051611a7d9190612a18565b60006040518083038185875af1925050503d8060008114611aba576040519150601f19603f3d011682016040523d82523d6000602084013e611abf565b606091505b5091509150611acf868383611ada565b925050509392505050565b606082611aef57611aea82611b69565b611b61565b60008251148015611b17575060008473ffffffffffffffffffffffffffffffffffffffff163b145b15611b5957836040517f9996b315000000000000000000000000000000000000000000000000000000008152600401611b50919061207c565b60405180910390fd5b819050611b62565b5b9392505050565b600081511115611b7c5780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b604051806060016040528060008019168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b604051806060016040528060006003811115611c0757611c0661226d565b5b8152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081525090565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611c7082611c45565b9050919050565b611c8081611c65565b8114611c8b57600080fd5b50565b600081359050611c9d81611c77565b92915050565b600060208284031215611cb957611cb8611c3b565b5b6000611cc784828501611c8e565b91505092915050565b6000819050919050565b611ce381611cd0565b8114611cee57600080fd5b50565b600081359050611d0081611cda565b92915050565b6000819050919050565b611d1981611d06565b8114611d2457600080fd5b50565b600081359050611d3681611d10565b92915050565b60008060008060808587031215611d5657611d55611c3b565b5b6000611d6487828801611c8e565b9450506020611d7587828801611cf1565b9350506040611d8687828801611d27565b9250506060611d9787828801611d27565b91505092959194509250565b60048110611db057600080fd5b50565b600081359050611dc281611da3565b92915050565b600080600060608486031215611de157611de0611c3b565b5b6000611def86828701611db3565b9350506020611e0086828701611c8e565b9250506040611e1186828701611d27565b9150509250925092565b600063ffffffff82169050919050565b611e3481611e1b565b82525050565b6000602082019050611e4f6000830184611e2b565b92915050565b600060208284031215611e6b57611e6a611c3b565b5b6000611e7984828501611d27565b91505092915050565b611e8b81611cd0565b82525050565b611e9a81611c65565b82525050565b611ea981611d06565b82525050565b606082016000820151611ec56000850182611e82565b506020820151611ed86020850182611e91565b506040820151611eeb6040850182611ea0565b50505050565b6000606082019050611f066000830184611eaf565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611f5a82611f11565b810181811067ffffffffffffffff82111715611f7957611f78611f22565b5b80604052505050565b6000611f8c611c31565b9050611f988282611f51565b919050565b611fa681611e1b565b8114611fb157600080fd5b50565b600081359050611fc381611f9d565b92915050565b600060608284031215611fdf57611fde611f0c565b5b611fe96060611f82565b90506000611ff984828501611cf1565b600083015250602061200d84828501611fb4565b602083015250604061202184828501611d27565b60408301525092915050565b6000806080838503121561204457612043611c3b565b5b600061205285828601611d27565b925050602061206385828601611fc9565b9150509250929050565b61207681611c65565b82525050565b6000602082019050612091600083018461206d565b92915050565b6120a081611d06565b82525050565b60006020820190506120bb6000830184612097565b92915050565b6000806000606084860312156120da576120d9611c3b565b5b60006120e886828701611c8e565b93505060206120f986828701611cf1565b925050604061210a86828701611d27565b9150509250925092565b600080fd5b600080fd5b600080fd5b60008083601f84011261213957612138612114565b5b8235905067ffffffffffffffff81111561215657612155612119565b5b6020830191508360808202830111156121725761217161211e565b5b9250929050565b600080602083850312156121905761218f611c3b565b5b600083013567ffffffffffffffff8111156121ae576121ad611c40565b5b6121ba85828601612123565b92509250509250929050565b6000819050919050565b60006121eb6121e66121e184611c45565b6121c6565b611c45565b9050919050565b60006121fd826121d0565b9050919050565b600061220f826121f2565b9050919050565b61221f81612204565b82525050565b600060208201905061223a6000830184612216565b92915050565b60006020828403121561225657612255611c3b565b5b600061226484828501611fb4565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600481106122ad576122ac61226d565b5b50565b60008190506122be8261229c565b919050565b60006122ce826122b0565b9050919050565b6122de816122c3565b82525050565b6060820160008201516122fa60008501826122d5565b50602082015161230d6020850182611e91565b5060408201516123206040850182611ea0565b50505050565b600060608201905061233b60008301846122e4565b92915050565b60006020828403121561235757612356611c3b565b5b600061236584828501611cf1565b91505092915050565b60008083601f84011261238457612383612114565b5b8235905067ffffffffffffffff8111156123a1576123a0612119565b5b6020830191508360208202830111156123bd576123bc61211e565b5b9250929050565b6000806000604084860312156123dd576123dc611c3b565b5b60006123eb86828701611d27565b935050602084013567ffffffffffffffff81111561240c5761240b611c40565b5b6124188682870161236e565b92509250509250925092565b600081519050919050565b600082825260208201905092915050565b60005b8381101561245e578082015181840152602081019050612443565b60008484015250505050565b600061247582612424565b61247f818561242f565b935061248f818560208601612440565b61249881611f11565b840191505092915050565b600060a0820190506124b8600083018861206d565b6124c5602083018761206d565b6124d26040830186612097565b6124df6060830185612097565b81810360808301526124f1818461246a565b90509695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082825260208201905092915050565b7f4f6e6c792074686520726563697069656e742063616e2063616e63656c20746860008201527f65206465706f7369740000000000000000000000000000000000000000000000602082015250565b600061259960298361252c565b91506125a48261253d565b604082019050919050565b600060208201905081810360008301526125c88161258c565b9050919050565b7f496e76616c696420746f6b656e20616464726573730000000000000000000000600082015250565b600061260560158361252c565b9150612610826125cf565b602082019050919050565b60006020820190508181036000830152612634816125f8565b9050919050565b6000606082019050612650600083018661206d565b61265d602083018561206d565b61266a6040830184612097565b949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006126ac82611d06565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036126de576126dd612672565b5b600182019050919050565b60006126f482611d06565b91506126ff83611d06565b925082820190508082111561271757612716612672565b5b92915050565b7f4465706f73697420636f756e746572206f766572666c6f770000000000000000600082015250565b600061275360188361252c565b915061275e8261271d565b602082019050919050565b6000602082019050818103600083015261278281612746565b9050919050565b600067ffffffffffffffff82169050919050565b60006127a882612789565b91506127b383612789565b9250828201905067ffffffffffffffff8111156127d3576127d2612672565b5b92915050565b6127e281611cd0565b82525050565b60006080820190506127fd60008301876127d9565b61280a6020830186611e2b565b6128176040830185612097565b6128246060830184612097565b95945050505050565b7f496e76616c6964206465706f7369742068617368000000000000000000000000600082015250565b600061286360148361252c565b915061286e8261282d565b602082019050919050565b6000602082019050818103600083015261289281612856565b9050919050565b6000819050919050565b6128b46128af82611cd0565b612899565b82525050565b60008160e01b9050919050565b60006128d2826128ba565b9050919050565b6128ea6128e582611e1b565b6128c7565b82525050565b6000819050919050565b61290b61290682611d06565b6128f0565b82525050565b600061291d82866128a3565b60208201915061292d82856128d9565b60048201915061293d82846128fa565b602082019150819050949350505050565b6000604082019050612963600083018561206d565b6129706020830184612097565b9392505050565b60008115159050919050565b61298c81612977565b811461299757600080fd5b50565b6000815190506129a981612983565b92915050565b6000602082840312156129c5576129c4611c3b565b5b60006129d38482850161299a565b91505092915050565b600081905092915050565b60006129f282612424565b6129fc81856129dc565b9350612a0c818560208601612440565b80840191505092915050565b6000612a2482846129e7565b91508190509291505056fea26469706673582212208675cd56c16df62cd00dd7f0eaf37aa3d8d000baf6b6adbfb5d0e466c815751164736f6c63430008140033";

type LiquidityConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LiquidityConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Liquidity__factory extends ContractFactory {
  constructor(...args: LiquidityConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    scrollMessenger: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Liquidity> {
    return super.deploy(scrollMessenger, overrides || {}) as Promise<Liquidity>;
  }
  override getDeployTransaction(
    scrollMessenger: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(scrollMessenger, overrides || {});
  }
  override attach(address: string): Liquidity {
    return super.attach(address) as Liquidity;
  }
  override connect(signer: Signer): Liquidity__factory {
    return super.connect(signer) as Liquidity__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LiquidityInterface {
    return new utils.Interface(_abi) as LiquidityInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Liquidity {
    return new Contract(address, _abi, signerOrProvider) as Liquidity;
  }
}
