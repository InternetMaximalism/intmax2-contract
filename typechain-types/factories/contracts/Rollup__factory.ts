/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { Rollup, RollupInterface } from "../../contracts/Rollup";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "scrollMessenger",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "prevBlockHash",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "address",
        name: "blockBuilder",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "depositTreeRoot",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "bytes32",
        name: "signatureHash",
        type: "bytes32",
      },
    ],
    name: "BlockPosted",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes32",
        name: "depositTreeRoot",
        type: "bytes32",
      },
    ],
    name: "DepositsProcessed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "withdrawalRequest",
        type: "bytes32",
      },
      {
        indexed: false,
        internalType: "address",
        name: "withdrawAggregator",
        type: "address",
      },
    ],
    name: "WithdrawRequested",
    type: "event",
  },
  {
    inputs: [],
    name: "_blockBuilderRegistryContract",
    outputs: [
      {
        internalType: "contract IBlockBuilderRegistry",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "_liquidityContract",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "_scrollMessenger",
    outputs: [
      {
        internalType: "contract IScrollMessenger",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "blockNumber",
        type: "uint32",
      },
    ],
    name: "getBlockHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getDepositTreeRoot",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getLastProcessedWIthdrawalId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "isRegistrationBlock",
        type: "bool",
      },
      {
        internalType: "bytes32",
        name: "txTreeRoot",
        type: "bytes32",
      },
      {
        internalType: "uint128",
        name: "senderFlags",
        type: "uint128",
      },
      {
        internalType: "bytes32",
        name: "publicKeysHash",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "accountIdsHash",
        type: "bytes32",
      },
      {
        internalType: "uint256[2]",
        name: "aggregatedPublicKey",
        type: "uint256[2]",
      },
      {
        internalType: "uint256[4]",
        name: "aggregatedSignature",
        type: "uint256[4]",
      },
      {
        internalType: "uint256[4]",
        name: "messagePoint",
        type: "uint256[4]",
      },
    ],
    name: "postBlock",
    outputs: [
      {
        internalType: "uint256",
        name: "blockNumber",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "recipient",
            type: "address",
          },
          {
            internalType: "uint32",
            name: "tokenIndex",
            type: "uint32",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
          {
            internalType: "bytes32",
            name: "salt",
            type: "bytes32",
          },
        ],
        internalType: "struct IRollup.Withdrawal[]",
        name: "withdrawalRequests",
        type: "tuple[]",
      },
      {
        internalType: "uint256[]",
        name: "publicInputs",
        type: "uint256[]",
      },
      {
        internalType: "bytes",
        name: "proof",
        type: "bytes",
      },
    ],
    name: "postWithdrawRequests",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "recipientSaltHash",
            type: "bytes32",
          },
          {
            internalType: "uint32",
            name: "tokenIndex",
            type: "uint32",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
        ],
        internalType: "struct ILiquidity.Deposit[]",
        name: "deposits",
        type: "tuple[]",
      },
    ],
    name: "processDeposits",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "lastProcessedWithdrawId",
        type: "uint256",
      },
    ],
    name: "submitWithdrawals",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "liquidityContract",
        type: "address",
      },
      {
        internalType: "address",
        name: "blockBuilderRegistryContract",
        type: "address",
      },
    ],
    name: "updateDependentContract",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620014d4380380620014d4833981810160405281019062000037919062000128565b62000048816200004f60201b60201c565b506200015a565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060056000801b908060018154018082558091505060019003906000526020600020016000909190919091505550565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000f082620000c3565b9050919050565b6200010281620000e3565b81146200010e57600080fd5b50565b6000815190506200012281620000f7565b92915050565b600060208284031215620001415762000140620000be565b5b6000620001518482850162000111565b91505092915050565b61136a806200016a6000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c806388f1472b1161007157806388f1472b14610152578063892a694014610170578063aa8fc35b1461018c578063d2b210a1146101aa578063d6e4602d146101da578063dcaad428146101f6576100a9565b8063045d9610146100ae578063048de2f6146100cc57806311f0f60e146100ea57806348253b7a146101065780636e0e487314610136575b600080fd5b6100b6610214565b6040516100c3919061070f565b60405180910390f35b6100d461023a565b6040516100e19190610743565b60405180910390f35b61010460048036038101906100ff919061079e565b610244565b005b610120600480360381019061011b91906108d3565b6102ca565b60405161012d91906109a3565b60405180910390f35b610150600480360381019061014b9190610aca565b6104b4565b005b61015a610578565b60405161016791906109a3565b60405180910390f35b61018a60048036038101906101859190610bd4565b610582565b005b6101946105cd565b6040516101a19190610c80565b60405180910390f35b6101c460048036038101906101bf9190610cd7565b6105f1565b6040516101d19190610743565b60405180910390f35b6101f460048036038101906101ef9190610d30565b61061f565b005b6101fe610629565b60405161020b9190610d7e565b60405180910390f35b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600354905090565b81600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16636a5387a8336040518263ffffffff1660e01b8152600401610327919061070f565b602060405180830381865afa158015610344573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103689190610dae565b6103a7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161039e90610e38565b60405180910390fd5b600089898989898989896040516020016103c8989796959493929190610f20565b6040516020818303038152906040528051906020012090506005805490509150600060056001846103f99190610fe1565b8154811061040a57610409611015565b5b9060005260206000200154905060006003549050600561042c8383868861064f565b90806001815401808255809150506001900390600052602060002001600090919091909150553373ffffffffffffffffffffffffffffffffffffffff16827fe27163b76905dc373b4ad854ddc9403bbac659c5f1c5191c39e5a7c44574040a86848760405161049d93929190611044565b60405180910390a350505098975050505050505050565b60008060001b905060005b878790508110156105365760076104fd8989848181106104e2576104e1611015565b5b9050608002018036038101906104f89190611184565b610688565b9080600181540180825580915050600190039060005260206000200160009091909190915055808061052e906111b1565b9150506104bf565b50807f0e3e90af4fd393b8486d674b4f90f884aea927619dbfb8458b4a732d9f7694f033604051610567919061070f565b60405180910390a250505050505050565b6000600654905090565b60008060001b9050806003819055507f22ab6afd5caf53c894a7bb125d98ba16962ef2986041d88192b54e81ed84a103816040516105c09190610743565b60405180910390a1505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600060058263ffffffff168154811061060d5761060c611015565b5b90600052602060002001549050919050565b8060068190555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600084848484604051602001610668949392919061121a565b604051602081830303815290604052805190602001209050949350505050565b600081600001518260200151836040015184606001516040516020016106b194939291906112e6565b604051602081830303815290604052805190602001209050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006106f9826106ce565b9050919050565b610709816106ee565b82525050565b60006020820190506107246000830184610700565b92915050565b6000819050919050565b61073d8161072a565b82525050565b60006020820190506107586000830184610734565b92915050565b6000604051905090565b600080fd5b600080fd5b61077b816106ee565b811461078657600080fd5b50565b60008135905061079881610772565b92915050565b600080604083850312156107b5576107b4610768565b5b60006107c385828601610789565b92505060206107d485828601610789565b9150509250929050565b60008115159050919050565b6107f3816107de565b81146107fe57600080fd5b50565b600081359050610810816107ea565b92915050565b61081f8161072a565b811461082a57600080fd5b50565b60008135905061083c81610816565b92915050565b60006fffffffffffffffffffffffffffffffff82169050919050565b61086781610842565b811461087257600080fd5b50565b6000813590506108848161085e565b92915050565b600080fd5b6000819050826020600202820111156108ab576108aa61088a565b5b92915050565b6000819050826020600402820111156108cd576108cc61088a565b5b92915050565b6000806000806000806000806101e0898b0312156108f4576108f3610768565b5b60006109028b828c01610801565b98505060206109138b828c0161082d565b97505060406109248b828c01610875565b96505060606109358b828c0161082d565b95505060806109468b828c0161082d565b94505060a06109578b828c0161088f565b93505060e06109688b828c016108b1565b92505061016061097a8b828c016108b1565b9150509295985092959890939650565b6000819050919050565b61099d8161098a565b82525050565b60006020820190506109b86000830184610994565b92915050565b600080fd5b600080fd5b60008083601f8401126109de576109dd6109be565b5b8235905067ffffffffffffffff8111156109fb576109fa6109c3565b5b602083019150836080820283011115610a1757610a1661088a565b5b9250929050565b60008083601f840112610a3457610a336109be565b5b8235905067ffffffffffffffff811115610a5157610a506109c3565b5b602083019150836020820283011115610a6d57610a6c61088a565b5b9250929050565b60008083601f840112610a8a57610a896109be565b5b8235905067ffffffffffffffff811115610aa757610aa66109c3565b5b602083019150836001820283011115610ac357610ac261088a565b5b9250929050565b60008060008060008060608789031215610ae757610ae6610768565b5b600087013567ffffffffffffffff811115610b0557610b0461076d565b5b610b1189828a016109c8565b9650965050602087013567ffffffffffffffff811115610b3457610b3361076d565b5b610b4089828a01610a1e565b9450945050604087013567ffffffffffffffff811115610b6357610b6261076d565b5b610b6f89828a01610a74565b92509250509295509295509295565b60008083601f840112610b9457610b936109be565b5b8235905067ffffffffffffffff811115610bb157610bb06109c3565b5b602083019150836060820283011115610bcd57610bcc61088a565b5b9250929050565b60008060208385031215610beb57610bea610768565b5b600083013567ffffffffffffffff811115610c0957610c0861076d565b5b610c1585828601610b7e565b92509250509250929050565b6000819050919050565b6000610c46610c41610c3c846106ce565b610c21565b6106ce565b9050919050565b6000610c5882610c2b565b9050919050565b6000610c6a82610c4d565b9050919050565b610c7a81610c5f565b82525050565b6000602082019050610c956000830184610c71565b92915050565b600063ffffffff82169050919050565b610cb481610c9b565b8114610cbf57600080fd5b50565b600081359050610cd181610cab565b92915050565b600060208284031215610ced57610cec610768565b5b6000610cfb84828501610cc2565b91505092915050565b610d0d8161098a565b8114610d1857600080fd5b50565b600081359050610d2a81610d04565b92915050565b600060208284031215610d4657610d45610768565b5b6000610d5484828501610d1b565b91505092915050565b6000610d6882610c4d565b9050919050565b610d7881610d5d565b82525050565b6000602082019050610d936000830184610d6f565b92915050565b600081519050610da8816107ea565b92915050565b600060208284031215610dc457610dc3610768565b5b6000610dd284828501610d99565b91505092915050565b600082825260208201905092915050565b7f426c6f636b206275696c646572206973206e6f742076616c6964000000000000600082015250565b6000610e22601a83610ddb565b9150610e2d82610dec565b602082019050919050565b60006020820190508181036000830152610e5181610e15565b9050919050565b60008160f81b9050919050565b6000610e7082610e58565b9050919050565b6000610e8282610e65565b9050919050565b610e9a610e95826107de565b610e77565b82525050565b6000819050919050565b610ebb610eb68261072a565b610ea0565b82525050565b60008160801b9050919050565b6000610ed982610ec1565b9050919050565b610ef1610eec82610842565b610ece565b82525050565b82818337505050565b610f0c60408383610ef7565b5050565b610f1c60808383610ef7565b5050565b6000610f2c828b610e89565b600182019150610f3c828a610eaa565b602082019150610f4c8289610ee0565b601082019150610f5c8288610eaa565b602082019150610f6c8287610eaa565b602082019150610f7c8286610f00565b604082019150610f8c8285610f10565b608082019150610f9c8284610f10565b6080820191508190509998505050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610fec8261098a565b9150610ff78361098a565b925082820390508181111561100f5761100e610fb2565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006060820190506110596000830186610994565b6110666020830185610734565b6110736040830184610734565b949350505050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6110c982611080565b810181811067ffffffffffffffff821117156110e8576110e7611091565b5b80604052505050565b60006110fb61075e565b905061110782826110c0565b919050565b6000608082840312156111225761112161107b565b5b61112c60806110f1565b9050600061113c84828501610789565b600083015250602061115084828501610cc2565b602083015250604061116484828501610d1b565b60408301525060606111788482850161082d565b60608301525092915050565b60006080828403121561119a57611199610768565b5b60006111a88482850161110c565b91505092915050565b60006111bc8261098a565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036111ee576111ed610fb2565b5b600182019050919050565b6000819050919050565b61121461120f8261098a565b6111f9565b82525050565b60006112268287610eaa565b6020820191506112368286610eaa565b6020820191506112468285610eaa565b6020820191506112568284611203565b60208201915081905095945050505050565b60008160601b9050919050565b600061128082611268565b9050919050565b600061129282611275565b9050919050565b6112aa6112a5826106ee565b611287565b82525050565b60008160e01b9050919050565b60006112c8826112b0565b9050919050565b6112e06112db82610c9b565b6112bd565b82525050565b60006112f28287611299565b60148201915061130282866112cf565b6004820191506113128285611203565b6020820191506113228284610eaa565b6020820191508190509594505050505056fea26469706673582212200b12aafa389beecfd0d317c35c656897ed5baeb357565d682e22df48438d941264736f6c63430008140033";

type RollupConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RollupConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Rollup__factory extends ContractFactory {
  constructor(...args: RollupConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    scrollMessenger: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Rollup> {
    return super.deploy(scrollMessenger, overrides || {}) as Promise<Rollup>;
  }
  override getDeployTransaction(
    scrollMessenger: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(scrollMessenger, overrides || {});
  }
  override attach(address: string): Rollup {
    return super.attach(address) as Rollup;
  }
  override connect(signer: Signer): Rollup__factory {
    return super.connect(signer) as Rollup__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RollupInterface {
    return new utils.Interface(_abi) as RollupInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Rollup {
    return new Contract(address, _abi, signerOrProvider) as Rollup;
  }
}
