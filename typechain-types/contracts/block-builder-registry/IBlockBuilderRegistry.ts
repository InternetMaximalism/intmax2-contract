/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace FraudProofPublicInputsLib {
  export type FraudProofPublicInputsStruct = {
    blockHash: BytesLike;
    blockNumber: BigNumberish;
    challenger: AddressLike;
  };

  export type FraudProofPublicInputsStructOutput = [
    blockHash: string,
    blockNumber: bigint,
    challenger: string
  ] & { blockHash: string; blockNumber: bigint; challenger: string };
}

export interface IBlockBuilderRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "isValidBlockBuilder"
      | "setBurnAddress"
      | "stopBlockBuilder"
      | "submitBlockFraudProof"
      | "unstake"
      | "updateBlockBuilder"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BlockBuilderSlashed"
      | "BlockBuilderStopped"
      | "BlockBuilderUpdated"
      | "BlockFraudProofSubmitted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "isValidBlockBuilder",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setBurnAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "stopBlockBuilder",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "submitBlockFraudProof",
    values: [FraudProofPublicInputsLib.FraudProofPublicInputsStruct, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "unstake", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateBlockBuilder",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "isValidBlockBuilder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBurnAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stopBlockBuilder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitBlockFraudProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateBlockBuilder",
    data: BytesLike
  ): Result;
}

export namespace BlockBuilderSlashedEvent {
  export type InputTuple = [blockBuilder: AddressLike, challenger: AddressLike];
  export type OutputTuple = [blockBuilder: string, challenger: string];
  export interface OutputObject {
    blockBuilder: string;
    challenger: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BlockBuilderStoppedEvent {
  export type InputTuple = [blockBuilder: AddressLike];
  export type OutputTuple = [blockBuilder: string];
  export interface OutputObject {
    blockBuilder: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BlockBuilderUpdatedEvent {
  export type InputTuple = [
    blockBuilder: AddressLike,
    url: string,
    stakeAmount: BigNumberish
  ];
  export type OutputTuple = [
    blockBuilder: string,
    url: string,
    stakeAmount: bigint
  ];
  export interface OutputObject {
    blockBuilder: string;
    url: string;
    stakeAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BlockFraudProofSubmittedEvent {
  export type InputTuple = [
    blockNumber: BigNumberish,
    blockBuilder: AddressLike,
    challenger: AddressLike
  ];
  export type OutputTuple = [
    blockNumber: bigint,
    blockBuilder: string,
    challenger: string
  ];
  export interface OutputObject {
    blockNumber: bigint;
    blockBuilder: string;
    challenger: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IBlockBuilderRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): IBlockBuilderRegistry;
  waitForDeployment(): Promise<this>;

  interface: IBlockBuilderRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  isValidBlockBuilder: TypedContractMethod<
    [blockBuilder: AddressLike],
    [boolean],
    "view"
  >;

  setBurnAddress: TypedContractMethod<
    [_burnAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  stopBlockBuilder: TypedContractMethod<[], [void], "nonpayable">;

  submitBlockFraudProof: TypedContractMethod<
    [
      publicInputs: FraudProofPublicInputsLib.FraudProofPublicInputsStruct,
      proof: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  unstake: TypedContractMethod<[], [void], "nonpayable">;

  updateBlockBuilder: TypedContractMethod<[url: string], [void], "payable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "isValidBlockBuilder"
  ): TypedContractMethod<[blockBuilder: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "setBurnAddress"
  ): TypedContractMethod<[_burnAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "stopBlockBuilder"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "submitBlockFraudProof"
  ): TypedContractMethod<
    [
      publicInputs: FraudProofPublicInputsLib.FraudProofPublicInputsStruct,
      proof: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "unstake"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateBlockBuilder"
  ): TypedContractMethod<[url: string], [void], "payable">;

  getEvent(
    key: "BlockBuilderSlashed"
  ): TypedContractEvent<
    BlockBuilderSlashedEvent.InputTuple,
    BlockBuilderSlashedEvent.OutputTuple,
    BlockBuilderSlashedEvent.OutputObject
  >;
  getEvent(
    key: "BlockBuilderStopped"
  ): TypedContractEvent<
    BlockBuilderStoppedEvent.InputTuple,
    BlockBuilderStoppedEvent.OutputTuple,
    BlockBuilderStoppedEvent.OutputObject
  >;
  getEvent(
    key: "BlockBuilderUpdated"
  ): TypedContractEvent<
    BlockBuilderUpdatedEvent.InputTuple,
    BlockBuilderUpdatedEvent.OutputTuple,
    BlockBuilderUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "BlockFraudProofSubmitted"
  ): TypedContractEvent<
    BlockFraudProofSubmittedEvent.InputTuple,
    BlockFraudProofSubmittedEvent.OutputTuple,
    BlockFraudProofSubmittedEvent.OutputObject
  >;

  filters: {
    "BlockBuilderSlashed(address,address)": TypedContractEvent<
      BlockBuilderSlashedEvent.InputTuple,
      BlockBuilderSlashedEvent.OutputTuple,
      BlockBuilderSlashedEvent.OutputObject
    >;
    BlockBuilderSlashed: TypedContractEvent<
      BlockBuilderSlashedEvent.InputTuple,
      BlockBuilderSlashedEvent.OutputTuple,
      BlockBuilderSlashedEvent.OutputObject
    >;

    "BlockBuilderStopped(address)": TypedContractEvent<
      BlockBuilderStoppedEvent.InputTuple,
      BlockBuilderStoppedEvent.OutputTuple,
      BlockBuilderStoppedEvent.OutputObject
    >;
    BlockBuilderStopped: TypedContractEvent<
      BlockBuilderStoppedEvent.InputTuple,
      BlockBuilderStoppedEvent.OutputTuple,
      BlockBuilderStoppedEvent.OutputObject
    >;

    "BlockBuilderUpdated(address,string,uint256)": TypedContractEvent<
      BlockBuilderUpdatedEvent.InputTuple,
      BlockBuilderUpdatedEvent.OutputTuple,
      BlockBuilderUpdatedEvent.OutputObject
    >;
    BlockBuilderUpdated: TypedContractEvent<
      BlockBuilderUpdatedEvent.InputTuple,
      BlockBuilderUpdatedEvent.OutputTuple,
      BlockBuilderUpdatedEvent.OutputObject
    >;

    "BlockFraudProofSubmitted(uint32,address,address)": TypedContractEvent<
      BlockFraudProofSubmittedEvent.InputTuple,
      BlockFraudProofSubmittedEvent.OutputTuple,
      BlockFraudProofSubmittedEvent.OutputObject
    >;
    BlockFraudProofSubmitted: TypedContractEvent<
      BlockFraudProofSubmittedEvent.InputTuple,
      BlockFraudProofSubmittedEvent.OutputTuple,
      BlockFraudProofSubmittedEvent.OutputObject
    >;
  };
}
