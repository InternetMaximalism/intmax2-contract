/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace IBlockBuilderRegistry {
  export type BlockBuilderInfoStruct = {
    blockBuilderUrl: string;
    stakeAmount: BigNumberish;
    stopTime: BigNumberish;
    numSlashes: BigNumberish;
    isValid: boolean;
  };

  export type BlockBuilderInfoStructOutput = [
    blockBuilderUrl: string,
    stakeAmount: bigint,
    stopTime: bigint,
    numSlashes: bigint,
    isValid: boolean
  ] & {
    blockBuilderUrl: string;
    stakeAmount: bigint;
    stopTime: bigint;
    numSlashes: bigint;
    isValid: boolean;
  };
}

export interface BlockBuilderRegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "CHALLENGE_DURATION"
      | "MIN_STAKE_AMOUNT"
      | "getBlockBuilder"
      | "isValidBlockBuilder"
      | "slashBlockBuilder"
      | "stopBlockBuilder"
      | "unstake"
      | "updateBlockBuilder"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "BlockBuilderStoped" | "BlockBuilderUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "CHALLENGE_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_STAKE_AMOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBlockBuilder",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidBlockBuilder",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "slashBlockBuilder",
    values: [BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "stopBlockBuilder",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unstake", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateBlockBuilder",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "CHALLENGE_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_STAKE_AMOUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBlockBuilder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isValidBlockBuilder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "slashBlockBuilder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stopBlockBuilder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateBlockBuilder",
    data: BytesLike
  ): Result;
}

export namespace BlockBuilderStopedEvent {
  export type InputTuple = [blockBuilder: AddressLike];
  export type OutputTuple = [blockBuilder: string];
  export interface OutputObject {
    blockBuilder: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BlockBuilderUpdatedEvent {
  export type InputTuple = [
    blockBuilder: AddressLike,
    url: string,
    stakeAmount: BigNumberish
  ];
  export type OutputTuple = [
    blockBuilder: string,
    url: string,
    stakeAmount: bigint
  ];
  export interface OutputObject {
    blockBuilder: string;
    url: string;
    stakeAmount: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface BlockBuilderRegistry extends BaseContract {
  connect(runner?: ContractRunner | null): BlockBuilderRegistry;
  waitForDeployment(): Promise<this>;

  interface: BlockBuilderRegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  CHALLENGE_DURATION: TypedContractMethod<[], [bigint], "view">;

  MIN_STAKE_AMOUNT: TypedContractMethod<[], [bigint], "view">;

  getBlockBuilder: TypedContractMethod<
    [blockBuilder: AddressLike],
    [IBlockBuilderRegistry.BlockBuilderInfoStructOutput],
    "view"
  >;

  isValidBlockBuilder: TypedContractMethod<
    [blockBuilder: AddressLike],
    [boolean],
    "view"
  >;

  slashBlockBuilder: TypedContractMethod<
    [
      blockNumber: BigNumberish,
      blockBuilder: AddressLike,
      challenger: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  stopBlockBuilder: TypedContractMethod<[], [void], "nonpayable">;

  unstake: TypedContractMethod<[], [void], "nonpayable">;

  updateBlockBuilder: TypedContractMethod<[url: string], [void], "payable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "CHALLENGE_DURATION"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_STAKE_AMOUNT"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getBlockBuilder"
  ): TypedContractMethod<
    [blockBuilder: AddressLike],
    [IBlockBuilderRegistry.BlockBuilderInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "isValidBlockBuilder"
  ): TypedContractMethod<[blockBuilder: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "slashBlockBuilder"
  ): TypedContractMethod<
    [
      blockNumber: BigNumberish,
      blockBuilder: AddressLike,
      challenger: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "stopBlockBuilder"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "unstake"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateBlockBuilder"
  ): TypedContractMethod<[url: string], [void], "payable">;

  getEvent(
    key: "BlockBuilderStoped"
  ): TypedContractEvent<
    BlockBuilderStopedEvent.InputTuple,
    BlockBuilderStopedEvent.OutputTuple,
    BlockBuilderStopedEvent.OutputObject
  >;
  getEvent(
    key: "BlockBuilderUpdated"
  ): TypedContractEvent<
    BlockBuilderUpdatedEvent.InputTuple,
    BlockBuilderUpdatedEvent.OutputTuple,
    BlockBuilderUpdatedEvent.OutputObject
  >;

  filters: {
    "BlockBuilderStoped(address)": TypedContractEvent<
      BlockBuilderStopedEvent.InputTuple,
      BlockBuilderStopedEvent.OutputTuple,
      BlockBuilderStopedEvent.OutputObject
    >;
    BlockBuilderStoped: TypedContractEvent<
      BlockBuilderStopedEvent.InputTuple,
      BlockBuilderStopedEvent.OutputTuple,
      BlockBuilderStopedEvent.OutputObject
    >;

    "BlockBuilderUpdated(address,string,uint256)": TypedContractEvent<
      BlockBuilderUpdatedEvent.InputTuple,
      BlockBuilderUpdatedEvent.OutputTuple,
      BlockBuilderUpdatedEvent.OutputObject
    >;
    BlockBuilderUpdated: TypedContractEvent<
      BlockBuilderUpdatedEvent.InputTuple,
      BlockBuilderUpdatedEvent.OutputTuple,
      BlockBuilderUpdatedEvent.OutputObject
    >;
  };
}
