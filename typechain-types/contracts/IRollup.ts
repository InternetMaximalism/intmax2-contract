/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace IRollup {
  export type WithdrawalStruct = {
    recipient: AddressLike;
    tokenIndex: BigNumberish;
    amount: BigNumberish;
    salt: BytesLike;
  };

  export type WithdrawalStructOutput = [
    recipient: string,
    tokenIndex: bigint,
    amount: bigint,
    salt: string
  ] & { recipient: string; tokenIndex: bigint; amount: bigint; salt: string };
}

export declare namespace ILiquidity {
  export type DepositStruct = {
    recipientSaltHash: BytesLike;
    tokenIndex: BigNumberish;
    amount: BigNumberish;
  };

  export type DepositStructOutput = [
    recipientSaltHash: string,
    tokenIndex: bigint,
    amount: bigint
  ] & { recipientSaltHash: string; tokenIndex: bigint; amount: bigint };
}

export interface IRollupInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getBlockHash"
      | "getDepositTreeRoot"
      | "getLastProcessedWithdrawalId"
      | "postBlock"
      | "postWithdrawalRequests"
      | "processDeposits"
      | "submitBlockFraudProof"
      | "submitWithdrawals"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BlockFraudProofSubmitted"
      | "BlockPosted"
      | "DepositsProcessed"
      | "WithdrawRequested"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "getBlockHash",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDepositTreeRoot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLastProcessedWithdrawalId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "postBlock",
    values: [
      boolean,
      BytesLike,
      BigNumberish,
      BytesLike,
      BytesLike,
      [BigNumberish, BigNumberish],
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
      [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "postWithdrawalRequests",
    values: [IRollup.WithdrawalStruct[], BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "processDeposits",
    values: [ILiquidity.DepositStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "submitBlockFraudProof",
    values: [BigNumberish, AddressLike, BigNumberish[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "submitWithdrawals",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "getBlockHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDepositTreeRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastProcessedWithdrawalId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "postBlock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "postWithdrawalRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitBlockFraudProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitWithdrawals",
    data: BytesLike
  ): Result;
}

export namespace BlockFraudProofSubmittedEvent {
  export type InputTuple = [
    blockNumber: BigNumberish,
    blockBuilder: AddressLike,
    challenger: AddressLike
  ];
  export type OutputTuple = [
    blockNumber: bigint,
    blockBuilder: string,
    challenger: string
  ];
  export interface OutputObject {
    blockNumber: bigint;
    blockBuilder: string;
    challenger: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BlockPostedEvent {
  export type InputTuple = [
    prevBlockHash: BytesLike,
    blockBuilder: AddressLike,
    blockNumber: BigNumberish,
    depositTreeRoot: BytesLike,
    signatureHash: BytesLike
  ];
  export type OutputTuple = [
    prevBlockHash: string,
    blockBuilder: string,
    blockNumber: bigint,
    depositTreeRoot: string,
    signatureHash: string
  ];
  export interface OutputObject {
    prevBlockHash: string;
    blockBuilder: string;
    blockNumber: bigint;
    depositTreeRoot: string;
    signatureHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositsProcessedEvent {
  export type InputTuple = [depositTreeRoot: BytesLike];
  export type OutputTuple = [depositTreeRoot: string];
  export interface OutputObject {
    depositTreeRoot: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WithdrawRequestedEvent {
  export type InputTuple = [
    withdrawalRequest: BytesLike,
    withdrawAggregator: AddressLike
  ];
  export type OutputTuple = [
    withdrawalRequest: string,
    withdrawAggregator: string
  ];
  export interface OutputObject {
    withdrawalRequest: string;
    withdrawAggregator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IRollup extends BaseContract {
  connect(runner?: ContractRunner | null): IRollup;
  waitForDeployment(): Promise<this>;

  interface: IRollupInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getBlockHash: TypedContractMethod<
    [blockNumber: BigNumberish],
    [string],
    "view"
  >;

  getDepositTreeRoot: TypedContractMethod<[], [string], "view">;

  getLastProcessedWithdrawalId: TypedContractMethod<[], [bigint], "view">;

  postBlock: TypedContractMethod<
    [
      isRegistrationBlock: boolean,
      txTreeRoot: BytesLike,
      senderFlags: BigNumberish,
      publicKeysHash: BytesLike,
      accountIdsHash: BytesLike,
      aggregatedPublicKey: [BigNumberish, BigNumberish],
      aggregatedSignature: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      messagePoint: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
    ],
    [bigint],
    "nonpayable"
  >;

  postWithdrawalRequests: TypedContractMethod<
    [
      withdrawals: IRollup.WithdrawalStruct[],
      publicInputs: BigNumberish[],
      proof: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  processDeposits: TypedContractMethod<
    [deposits: ILiquidity.DepositStruct[]],
    [void],
    "nonpayable"
  >;

  submitBlockFraudProof: TypedContractMethod<
    [
      blockNumber: BigNumberish,
      blockBuilder: AddressLike,
      publicInputs: BigNumberish[],
      proof: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  submitWithdrawals: TypedContractMethod<
    [lastProcessedWithdrawId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getBlockHash"
  ): TypedContractMethod<[blockNumber: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getDepositTreeRoot"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getLastProcessedWithdrawalId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "postBlock"
  ): TypedContractMethod<
    [
      isRegistrationBlock: boolean,
      txTreeRoot: BytesLike,
      senderFlags: BigNumberish,
      publicKeysHash: BytesLike,
      accountIdsHash: BytesLike,
      aggregatedPublicKey: [BigNumberish, BigNumberish],
      aggregatedSignature: [
        BigNumberish,
        BigNumberish,
        BigNumberish,
        BigNumberish
      ],
      messagePoint: [BigNumberish, BigNumberish, BigNumberish, BigNumberish]
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "postWithdrawalRequests"
  ): TypedContractMethod<
    [
      withdrawals: IRollup.WithdrawalStruct[],
      publicInputs: BigNumberish[],
      proof: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "processDeposits"
  ): TypedContractMethod<
    [deposits: ILiquidity.DepositStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "submitBlockFraudProof"
  ): TypedContractMethod<
    [
      blockNumber: BigNumberish,
      blockBuilder: AddressLike,
      publicInputs: BigNumberish[],
      proof: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "submitWithdrawals"
  ): TypedContractMethod<
    [lastProcessedWithdrawId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "BlockFraudProofSubmitted"
  ): TypedContractEvent<
    BlockFraudProofSubmittedEvent.InputTuple,
    BlockFraudProofSubmittedEvent.OutputTuple,
    BlockFraudProofSubmittedEvent.OutputObject
  >;
  getEvent(
    key: "BlockPosted"
  ): TypedContractEvent<
    BlockPostedEvent.InputTuple,
    BlockPostedEvent.OutputTuple,
    BlockPostedEvent.OutputObject
  >;
  getEvent(
    key: "DepositsProcessed"
  ): TypedContractEvent<
    DepositsProcessedEvent.InputTuple,
    DepositsProcessedEvent.OutputTuple,
    DepositsProcessedEvent.OutputObject
  >;
  getEvent(
    key: "WithdrawRequested"
  ): TypedContractEvent<
    WithdrawRequestedEvent.InputTuple,
    WithdrawRequestedEvent.OutputTuple,
    WithdrawRequestedEvent.OutputObject
  >;

  filters: {
    "BlockFraudProofSubmitted(uint32,address,address)": TypedContractEvent<
      BlockFraudProofSubmittedEvent.InputTuple,
      BlockFraudProofSubmittedEvent.OutputTuple,
      BlockFraudProofSubmittedEvent.OutputObject
    >;
    BlockFraudProofSubmitted: TypedContractEvent<
      BlockFraudProofSubmittedEvent.InputTuple,
      BlockFraudProofSubmittedEvent.OutputTuple,
      BlockFraudProofSubmittedEvent.OutputObject
    >;

    "BlockPosted(bytes32,address,uint256,bytes32,bytes32)": TypedContractEvent<
      BlockPostedEvent.InputTuple,
      BlockPostedEvent.OutputTuple,
      BlockPostedEvent.OutputObject
    >;
    BlockPosted: TypedContractEvent<
      BlockPostedEvent.InputTuple,
      BlockPostedEvent.OutputTuple,
      BlockPostedEvent.OutputObject
    >;

    "DepositsProcessed(bytes32)": TypedContractEvent<
      DepositsProcessedEvent.InputTuple,
      DepositsProcessedEvent.OutputTuple,
      DepositsProcessedEvent.OutputObject
    >;
    DepositsProcessed: TypedContractEvent<
      DepositsProcessedEvent.InputTuple,
      DepositsProcessedEvent.OutputTuple,
      DepositsProcessedEvent.OutputObject
    >;

    "WithdrawRequested(bytes32,address)": TypedContractEvent<
      WithdrawRequestedEvent.InputTuple,
      WithdrawRequestedEvent.OutputTuple,
      WithdrawRequestedEvent.OutputObject
    >;
    WithdrawRequested: TypedContractEvent<
      WithdrawRequestedEvent.InputTuple,
      WithdrawRequestedEvent.OutputTuple,
      WithdrawRequestedEvent.OutputObject
    >;
  };
}
