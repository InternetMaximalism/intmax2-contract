/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace ILiquidity {
  export type DepositStruct = {
    recipientSaltHash: PromiseOrValue<BytesLike>;
    tokenIndex: PromiseOrValue<BigNumberish>;
    amount: PromiseOrValue<BigNumberish>;
  };

  export type DepositStructOutput = [string, number, BigNumber] & {
    recipientSaltHash: string;
    tokenIndex: number;
    amount: BigNumber;
  };
}

export interface IRollupInterface extends utils.Interface {
  functions: {
    "getBlockHash(uint32)": FunctionFragment;
    "getDepositTreeRoot()": FunctionFragment;
    "postBlock(bool,bytes32,uint128,bytes32,bytes32,uint256[2],uint256[4],uint256[4])": FunctionFragment;
    "updateDepositTreeRoot((bytes32,uint32,uint256)[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "getBlockHash"
      | "getDepositTreeRoot"
      | "postBlock"
      | "updateDepositTreeRoot"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getBlockHash",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDepositTreeRoot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "postBlock",
    values: [
      PromiseOrValue<boolean>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
      [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDepositTreeRoot",
    values: [ILiquidity.DepositStruct[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "getBlockHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDepositTreeRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "postBlock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateDepositTreeRoot",
    data: BytesLike
  ): Result;

  events: {
    "BlockPosted(bytes32,address,uint256,bytes32,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BlockPosted"): EventFragment;
}

export interface BlockPostedEventObject {
  prevBlockHash: string;
  blockBuilder: string;
  blockNumber: BigNumber;
  depositTreeRoot: string;
  signatureHash: string;
}
export type BlockPostedEvent = TypedEvent<
  [string, string, BigNumber, string, string],
  BlockPostedEventObject
>;

export type BlockPostedEventFilter = TypedEventFilter<BlockPostedEvent>;

export interface IRollup extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IRollupInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getBlockHash(
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getDepositTreeRoot(overrides?: CallOverrides): Promise<[string]>;

    postBlock(
      isRegistrationBlock: PromiseOrValue<boolean>,
      txTreeRoot: PromiseOrValue<BytesLike>,
      senderFlags: PromiseOrValue<BigNumberish>,
      publicKeysHash: PromiseOrValue<BytesLike>,
      accountIdsHash: PromiseOrValue<BytesLike>,
      aggregatedPublicKey: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      aggregatedSignature: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      messagePoint: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateDepositTreeRoot(
      deposits: ILiquidity.DepositStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  getBlockHash(
    blockNumber: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getDepositTreeRoot(overrides?: CallOverrides): Promise<string>;

  postBlock(
    isRegistrationBlock: PromiseOrValue<boolean>,
    txTreeRoot: PromiseOrValue<BytesLike>,
    senderFlags: PromiseOrValue<BigNumberish>,
    publicKeysHash: PromiseOrValue<BytesLike>,
    accountIdsHash: PromiseOrValue<BytesLike>,
    aggregatedPublicKey: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ],
    aggregatedSignature: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ],
    messagePoint: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateDepositTreeRoot(
    deposits: ILiquidity.DepositStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getBlockHash(
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getDepositTreeRoot(overrides?: CallOverrides): Promise<string>;

    postBlock(
      isRegistrationBlock: PromiseOrValue<boolean>,
      txTreeRoot: PromiseOrValue<BytesLike>,
      senderFlags: PromiseOrValue<BigNumberish>,
      publicKeysHash: PromiseOrValue<BytesLike>,
      accountIdsHash: PromiseOrValue<BytesLike>,
      aggregatedPublicKey: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      aggregatedSignature: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      messagePoint: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateDepositTreeRoot(
      deposits: ILiquidity.DepositStruct[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BlockPosted(bytes32,address,uint256,bytes32,bytes32)"(
      prevBlockHash?: PromiseOrValue<BytesLike> | null,
      blockBuilder?: PromiseOrValue<string> | null,
      blockNumber?: null,
      depositTreeRoot?: null,
      signatureHash?: null
    ): BlockPostedEventFilter;
    BlockPosted(
      prevBlockHash?: PromiseOrValue<BytesLike> | null,
      blockBuilder?: PromiseOrValue<string> | null,
      blockNumber?: null,
      depositTreeRoot?: null,
      signatureHash?: null
    ): BlockPostedEventFilter;
  };

  estimateGas: {
    getBlockHash(
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDepositTreeRoot(overrides?: CallOverrides): Promise<BigNumber>;

    postBlock(
      isRegistrationBlock: PromiseOrValue<boolean>,
      txTreeRoot: PromiseOrValue<BytesLike>,
      senderFlags: PromiseOrValue<BigNumberish>,
      publicKeysHash: PromiseOrValue<BytesLike>,
      accountIdsHash: PromiseOrValue<BytesLike>,
      aggregatedPublicKey: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      aggregatedSignature: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      messagePoint: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateDepositTreeRoot(
      deposits: ILiquidity.DepositStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getBlockHash(
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDepositTreeRoot(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    postBlock(
      isRegistrationBlock: PromiseOrValue<boolean>,
      txTreeRoot: PromiseOrValue<BytesLike>,
      senderFlags: PromiseOrValue<BigNumberish>,
      publicKeysHash: PromiseOrValue<BytesLike>,
      accountIdsHash: PromiseOrValue<BytesLike>,
      aggregatedPublicKey: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      aggregatedSignature: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      messagePoint: [
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<BigNumberish>
      ],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateDepositTreeRoot(
      deposits: ILiquidity.DepositStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
