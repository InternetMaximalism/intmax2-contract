/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IRollupInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getBlockHashAndBuilder"
      | "postNonRegistrationBlock"
      | "postRegistrationBlock"
      | "processDeposits"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AccountIdsPosted"
      | "BlockPosted"
      | "DepositsProcessed"
      | "PubKeysPosted"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "getBlockHashAndBuilder",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "postNonRegistrationBlock",
    values: [
      BytesLike,
      BytesLike,
      [BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "postRegistrationBlock",
    values: [
      BytesLike,
      BytesLike,
      [BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      BigNumberish[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "processDeposits",
    values: [BigNumberish, BytesLike[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "getBlockHashAndBuilder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "postNonRegistrationBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "postRegistrationBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processDeposits",
    data: BytesLike
  ): Result;
}

export namespace AccountIdsPostedEvent {
  export type InputTuple = [blockNumber: BigNumberish, accountIds: BytesLike];
  export type OutputTuple = [blockNumber: bigint, accountIds: string];
  export interface OutputObject {
    blockNumber: bigint;
    accountIds: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BlockPostedEvent {
  export type InputTuple = [
    prevBlockHash: BytesLike,
    blockBuilder: AddressLike,
    blockNumber: BigNumberish,
    depositTreeRoot: BytesLike,
    signatureHash: BytesLike
  ];
  export type OutputTuple = [
    prevBlockHash: string,
    blockBuilder: string,
    blockNumber: bigint,
    depositTreeRoot: string,
    signatureHash: string
  ];
  export interface OutputObject {
    prevBlockHash: string;
    blockBuilder: string;
    blockNumber: bigint;
    depositTreeRoot: string;
    signatureHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositsProcessedEvent {
  export type InputTuple = [depositTreeRoot: BytesLike];
  export type OutputTuple = [depositTreeRoot: string];
  export interface OutputObject {
    depositTreeRoot: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PubKeysPostedEvent {
  export type InputTuple = [
    blockNumber: BigNumberish,
    senderPublicKeys: BigNumberish[]
  ];
  export type OutputTuple = [blockNumber: bigint, senderPublicKeys: bigint[]];
  export interface OutputObject {
    blockNumber: bigint;
    senderPublicKeys: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IRollup extends BaseContract {
  connect(runner?: ContractRunner | null): IRollup;
  waitForDeployment(): Promise<this>;

  interface: IRollupInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getBlockHashAndBuilder: TypedContractMethod<
    [blockNumber: BigNumberish],
    [[string, string]],
    "view"
  >;

  postNonRegistrationBlock: TypedContractMethod<
    [
      txTreeRoot: BytesLike,
      senderFlags: BytesLike,
      aggregatedPublicKey: [BytesLike, BytesLike],
      aggregatedSignature: [BytesLike, BytesLike, BytesLike, BytesLike],
      messagePoint: [BytesLike, BytesLike, BytesLike, BytesLike],
      publicKeysHash: BytesLike,
      senderAccountIds: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  postRegistrationBlock: TypedContractMethod<
    [
      txTreeRoot: BytesLike,
      senderFlags: BytesLike,
      aggregatedPublicKey: [BytesLike, BytesLike],
      aggregatedSignature: [BytesLike, BytesLike, BytesLike, BytesLike],
      messagePoint: [BytesLike, BytesLike, BytesLike, BytesLike],
      senderPublicKeys: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  processDeposits: TypedContractMethod<
    [lastProcessedDepositId: BigNumberish, depositHashes: BytesLike[]],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getBlockHashAndBuilder"
  ): TypedContractMethod<
    [blockNumber: BigNumberish],
    [[string, string]],
    "view"
  >;
  getFunction(
    nameOrSignature: "postNonRegistrationBlock"
  ): TypedContractMethod<
    [
      txTreeRoot: BytesLike,
      senderFlags: BytesLike,
      aggregatedPublicKey: [BytesLike, BytesLike],
      aggregatedSignature: [BytesLike, BytesLike, BytesLike, BytesLike],
      messagePoint: [BytesLike, BytesLike, BytesLike, BytesLike],
      publicKeysHash: BytesLike,
      senderAccountIds: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "postRegistrationBlock"
  ): TypedContractMethod<
    [
      txTreeRoot: BytesLike,
      senderFlags: BytesLike,
      aggregatedPublicKey: [BytesLike, BytesLike],
      aggregatedSignature: [BytesLike, BytesLike, BytesLike, BytesLike],
      messagePoint: [BytesLike, BytesLike, BytesLike, BytesLike],
      senderPublicKeys: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "processDeposits"
  ): TypedContractMethod<
    [lastProcessedDepositId: BigNumberish, depositHashes: BytesLike[]],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AccountIdsPosted"
  ): TypedContractEvent<
    AccountIdsPostedEvent.InputTuple,
    AccountIdsPostedEvent.OutputTuple,
    AccountIdsPostedEvent.OutputObject
  >;
  getEvent(
    key: "BlockPosted"
  ): TypedContractEvent<
    BlockPostedEvent.InputTuple,
    BlockPostedEvent.OutputTuple,
    BlockPostedEvent.OutputObject
  >;
  getEvent(
    key: "DepositsProcessed"
  ): TypedContractEvent<
    DepositsProcessedEvent.InputTuple,
    DepositsProcessedEvent.OutputTuple,
    DepositsProcessedEvent.OutputObject
  >;
  getEvent(
    key: "PubKeysPosted"
  ): TypedContractEvent<
    PubKeysPostedEvent.InputTuple,
    PubKeysPostedEvent.OutputTuple,
    PubKeysPostedEvent.OutputObject
  >;

  filters: {
    "AccountIdsPosted(uint256,bytes)": TypedContractEvent<
      AccountIdsPostedEvent.InputTuple,
      AccountIdsPostedEvent.OutputTuple,
      AccountIdsPostedEvent.OutputObject
    >;
    AccountIdsPosted: TypedContractEvent<
      AccountIdsPostedEvent.InputTuple,
      AccountIdsPostedEvent.OutputTuple,
      AccountIdsPostedEvent.OutputObject
    >;

    "BlockPosted(bytes32,address,uint256,bytes32,bytes32)": TypedContractEvent<
      BlockPostedEvent.InputTuple,
      BlockPostedEvent.OutputTuple,
      BlockPostedEvent.OutputObject
    >;
    BlockPosted: TypedContractEvent<
      BlockPostedEvent.InputTuple,
      BlockPostedEvent.OutputTuple,
      BlockPostedEvent.OutputObject
    >;

    "DepositsProcessed(bytes32)": TypedContractEvent<
      DepositsProcessedEvent.InputTuple,
      DepositsProcessedEvent.OutputTuple,
      DepositsProcessedEvent.OutputObject
    >;
    DepositsProcessed: TypedContractEvent<
      DepositsProcessedEvent.InputTuple,
      DepositsProcessedEvent.OutputTuple,
      DepositsProcessedEvent.OutputObject
    >;

    "PubKeysPosted(uint256,uint256[])": TypedContractEvent<
      PubKeysPostedEvent.InputTuple,
      PubKeysPostedEvent.OutputTuple,
      PubKeysPostedEvent.OutputObject
    >;
    PubKeysPosted: TypedContractEvent<
      PubKeysPostedEvent.InputTuple,
      PubKeysPostedEvent.OutputTuple,
      PubKeysPostedEvent.OutputObject
    >;
  };
}
