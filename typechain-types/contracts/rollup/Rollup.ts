/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace WithdrawalLib {
  export type WithdrawalStruct = {
    recipient: AddressLike;
    tokenIndex: BigNumberish;
    amount: BigNumberish;
    nullifier: BytesLike;
  };

  export type WithdrawalStructOutput = [
    recipient: string,
    tokenIndex: bigint,
    amount: bigint,
    nullifier: string
  ] & {
    recipient: string;
    tokenIndex: bigint;
    amount: bigint;
    nullifier: string;
  };
}

export declare namespace ChainedWithdrawalLib {
  export type ChainedWithdrawalStruct = {
    recipient: AddressLike;
    tokenIndex: BigNumberish;
    amount: BigNumberish;
    nullifier: BytesLike;
    blockHash: BytesLike;
  };

  export type ChainedWithdrawalStructOutput = [
    recipient: string,
    tokenIndex: bigint,
    amount: bigint,
    nullifier: string,
    blockHash: string
  ] & {
    recipient: string;
    tokenIndex: bigint;
    amount: bigint;
    nullifier: string;
    blockHash: string;
  };
}

export declare namespace WithdrawalProofPublicInputsLib {
  export type WithdrawalProofPublicInputsStruct = {
    lastWithdrawalHash: BytesLike;
    withdrawalAggregator: AddressLike;
  };

  export type WithdrawalProofPublicInputsStructOutput = [
    lastWithdrawalHash: string,
    withdrawalAggregator: string
  ] & { lastWithdrawalHash: string; withdrawalAggregator: string };
}

export interface RollupInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "UPGRADE_INTERFACE_VERSION"
      | "blocks"
      | "getBlockHashAndBuilder"
      | "getClaimableWithdrawalsQueueSize"
      | "getDirectWithdrawalsQueueSize"
      | "initialize"
      | "lastProcessedDepositId"
      | "lastProcessedWithdrawalId"
      | "owner"
      | "postNonRegistrationBlock"
      | "postRegistrationBlock"
      | "postedBlockHashes"
      | "processDeposits"
      | "proxiableUUID"
      | "relayClaimableWithdrawals"
      | "relayDirectWithdrawals"
      | "renounceOwnership"
      | "submitWithdrawalProof"
      | "transferOwnership"
      | "upgradeToAndCall"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AccountIdsPosted"
      | "BlockPosted"
      | "ClaimableWithdrawalQueued"
      | "DepositsProcessed"
      | "DirectWithdrawalQueued"
      | "Initialized"
      | "OwnershipTransferred"
      | "PubKeysPosted"
      | "Upgraded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "blocks",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBlockHashAndBuilder",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimableWithdrawalsQueueSize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDirectWithdrawalsQueueSize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike, AddressLike, AddressLike, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "lastProcessedDepositId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastProcessedWithdrawalId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "postNonRegistrationBlock",
    values: [
      BytesLike,
      BytesLike,
      [BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "postRegistrationBlock",
    values: [
      BytesLike,
      BytesLike,
      [BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      [BytesLike, BytesLike, BytesLike, BytesLike],
      BigNumberish[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "postedBlockHashes",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "processDeposits",
    values: [BigNumberish, BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "relayClaimableWithdrawals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "relayDirectWithdrawals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "submitWithdrawalProof",
    values: [
      ChainedWithdrawalLib.ChainedWithdrawalStruct[],
      WithdrawalProofPublicInputsLib.WithdrawalProofPublicInputsStruct,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "UPGRADE_INTERFACE_VERSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "blocks", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBlockHashAndBuilder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClaimableWithdrawalsQueueSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDirectWithdrawalsQueueSize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastProcessedDepositId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastProcessedWithdrawalId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "postNonRegistrationBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "postRegistrationBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "postedBlockHashes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "relayClaimableWithdrawals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "relayDirectWithdrawals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitWithdrawalProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
}

export namespace AccountIdsPostedEvent {
  export type InputTuple = [blockNumber: BigNumberish, accountIds: BytesLike];
  export type OutputTuple = [blockNumber: bigint, accountIds: string];
  export interface OutputObject {
    blockNumber: bigint;
    accountIds: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BlockPostedEvent {
  export type InputTuple = [
    prevBlockHash: BytesLike,
    blockBuilder: AddressLike,
    blockNumber: BigNumberish,
    depositTreeRoot: BytesLike,
    signatureHash: BytesLike
  ];
  export type OutputTuple = [
    prevBlockHash: string,
    blockBuilder: string,
    blockNumber: bigint,
    depositTreeRoot: string,
    signatureHash: string
  ];
  export interface OutputObject {
    prevBlockHash: string;
    blockBuilder: string;
    blockNumber: bigint;
    depositTreeRoot: string;
    signatureHash: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClaimableWithdrawalQueuedEvent {
  export type InputTuple = [
    id: BigNumberish,
    withdrawal: WithdrawalLib.WithdrawalStruct
  ];
  export type OutputTuple = [
    id: bigint,
    withdrawal: WithdrawalLib.WithdrawalStructOutput
  ];
  export interface OutputObject {
    id: bigint;
    withdrawal: WithdrawalLib.WithdrawalStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DepositsProcessedEvent {
  export type InputTuple = [depositTreeRoot: BytesLike];
  export type OutputTuple = [depositTreeRoot: string];
  export interface OutputObject {
    depositTreeRoot: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DirectWithdrawalQueuedEvent {
  export type InputTuple = [
    id: BigNumberish,
    withdrawal: WithdrawalLib.WithdrawalStruct
  ];
  export type OutputTuple = [
    id: bigint,
    withdrawal: WithdrawalLib.WithdrawalStructOutput
  ];
  export interface OutputObject {
    id: bigint;
    withdrawal: WithdrawalLib.WithdrawalStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PubKeysPostedEvent {
  export type InputTuple = [
    blockNumber: BigNumberish,
    senderPublicKeys: BigNumberish[]
  ];
  export type OutputTuple = [blockNumber: bigint, senderPublicKeys: bigint[]];
  export interface OutputObject {
    blockNumber: bigint;
    senderPublicKeys: bigint[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Rollup extends BaseContract {
  connect(runner?: ContractRunner | null): Rollup;
  waitForDeployment(): Promise<this>;

  interface: RollupInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  UPGRADE_INTERFACE_VERSION: TypedContractMethod<[], [string], "view">;

  blocks: TypedContractMethod<
    [arg0: BigNumberish],
    [[string, string] & { hash: string; builder: string }],
    "view"
  >;

  getBlockHashAndBuilder: TypedContractMethod<
    [blockNumber: BigNumberish],
    [[string, string]],
    "view"
  >;

  getClaimableWithdrawalsQueueSize: TypedContractMethod<[], [bigint], "view">;

  getDirectWithdrawalsQueueSize: TypedContractMethod<[], [bigint], "view">;

  initialize: TypedContractMethod<
    [
      _scrollMessenger: AddressLike,
      _withdrawalVerifier: AddressLike,
      _liquidity: AddressLike,
      _blockBuilderRegistry: AddressLike,
      _directWithdrawalTokenIndices: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  lastProcessedDepositId: TypedContractMethod<[], [bigint], "view">;

  lastProcessedWithdrawalId: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  postNonRegistrationBlock: TypedContractMethod<
    [
      txTreeRoot: BytesLike,
      senderFlags: BytesLike,
      aggregatedPublicKey: [BytesLike, BytesLike],
      aggregatedSignature: [BytesLike, BytesLike, BytesLike, BytesLike],
      messagePoint: [BytesLike, BytesLike, BytesLike, BytesLike],
      publicKeysHash: BytesLike,
      senderAccountIds: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  postRegistrationBlock: TypedContractMethod<
    [
      txTreeRoot: BytesLike,
      senderFlags: BytesLike,
      aggregatedPublicKey: [BytesLike, BytesLike],
      aggregatedSignature: [BytesLike, BytesLike, BytesLike, BytesLike],
      messagePoint: [BytesLike, BytesLike, BytesLike, BytesLike],
      senderPublicKeys: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  postedBlockHashes: TypedContractMethod<[arg0: BytesLike], [bigint], "view">;

  processDeposits: TypedContractMethod<
    [_lastProcessedDepositId: BigNumberish, depositHashes: BytesLike[]],
    [void],
    "nonpayable"
  >;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  relayClaimableWithdrawals: TypedContractMethod<
    [processUpToId: BigNumberish],
    [void],
    "nonpayable"
  >;

  relayDirectWithdrawals: TypedContractMethod<
    [processUpToId: BigNumberish],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  submitWithdrawalProof: TypedContractMethod<
    [
      withdrawals: ChainedWithdrawalLib.ChainedWithdrawalStruct[],
      publicInputs: WithdrawalProofPublicInputsLib.WithdrawalProofPublicInputsStruct,
      proof: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "UPGRADE_INTERFACE_VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "blocks"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [[string, string] & { hash: string; builder: string }],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBlockHashAndBuilder"
  ): TypedContractMethod<
    [blockNumber: BigNumberish],
    [[string, string]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getClaimableWithdrawalsQueueSize"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getDirectWithdrawalsQueueSize"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      _scrollMessenger: AddressLike,
      _withdrawalVerifier: AddressLike,
      _liquidity: AddressLike,
      _blockBuilderRegistry: AddressLike,
      _directWithdrawalTokenIndices: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "lastProcessedDepositId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "lastProcessedWithdrawalId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "postNonRegistrationBlock"
  ): TypedContractMethod<
    [
      txTreeRoot: BytesLike,
      senderFlags: BytesLike,
      aggregatedPublicKey: [BytesLike, BytesLike],
      aggregatedSignature: [BytesLike, BytesLike, BytesLike, BytesLike],
      messagePoint: [BytesLike, BytesLike, BytesLike, BytesLike],
      publicKeysHash: BytesLike,
      senderAccountIds: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "postRegistrationBlock"
  ): TypedContractMethod<
    [
      txTreeRoot: BytesLike,
      senderFlags: BytesLike,
      aggregatedPublicKey: [BytesLike, BytesLike],
      aggregatedSignature: [BytesLike, BytesLike, BytesLike, BytesLike],
      messagePoint: [BytesLike, BytesLike, BytesLike, BytesLike],
      senderPublicKeys: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "postedBlockHashes"
  ): TypedContractMethod<[arg0: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "processDeposits"
  ): TypedContractMethod<
    [_lastProcessedDepositId: BigNumberish, depositHashes: BytesLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "relayClaimableWithdrawals"
  ): TypedContractMethod<[processUpToId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "relayDirectWithdrawals"
  ): TypedContractMethod<[processUpToId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "submitWithdrawalProof"
  ): TypedContractMethod<
    [
      withdrawals: ChainedWithdrawalLib.ChainedWithdrawalStruct[],
      publicInputs: WithdrawalProofPublicInputsLib.WithdrawalProofPublicInputsStruct,
      proof: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  getEvent(
    key: "AccountIdsPosted"
  ): TypedContractEvent<
    AccountIdsPostedEvent.InputTuple,
    AccountIdsPostedEvent.OutputTuple,
    AccountIdsPostedEvent.OutputObject
  >;
  getEvent(
    key: "BlockPosted"
  ): TypedContractEvent<
    BlockPostedEvent.InputTuple,
    BlockPostedEvent.OutputTuple,
    BlockPostedEvent.OutputObject
  >;
  getEvent(
    key: "ClaimableWithdrawalQueued"
  ): TypedContractEvent<
    ClaimableWithdrawalQueuedEvent.InputTuple,
    ClaimableWithdrawalQueuedEvent.OutputTuple,
    ClaimableWithdrawalQueuedEvent.OutputObject
  >;
  getEvent(
    key: "DepositsProcessed"
  ): TypedContractEvent<
    DepositsProcessedEvent.InputTuple,
    DepositsProcessedEvent.OutputTuple,
    DepositsProcessedEvent.OutputObject
  >;
  getEvent(
    key: "DirectWithdrawalQueued"
  ): TypedContractEvent<
    DirectWithdrawalQueuedEvent.InputTuple,
    DirectWithdrawalQueuedEvent.OutputTuple,
    DirectWithdrawalQueuedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "PubKeysPosted"
  ): TypedContractEvent<
    PubKeysPostedEvent.InputTuple,
    PubKeysPostedEvent.OutputTuple,
    PubKeysPostedEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;

  filters: {
    "AccountIdsPosted(uint256,bytes)": TypedContractEvent<
      AccountIdsPostedEvent.InputTuple,
      AccountIdsPostedEvent.OutputTuple,
      AccountIdsPostedEvent.OutputObject
    >;
    AccountIdsPosted: TypedContractEvent<
      AccountIdsPostedEvent.InputTuple,
      AccountIdsPostedEvent.OutputTuple,
      AccountIdsPostedEvent.OutputObject
    >;

    "BlockPosted(bytes32,address,uint256,bytes32,bytes32)": TypedContractEvent<
      BlockPostedEvent.InputTuple,
      BlockPostedEvent.OutputTuple,
      BlockPostedEvent.OutputObject
    >;
    BlockPosted: TypedContractEvent<
      BlockPostedEvent.InputTuple,
      BlockPostedEvent.OutputTuple,
      BlockPostedEvent.OutputObject
    >;

    "ClaimableWithdrawalQueued(uint256,tuple)": TypedContractEvent<
      ClaimableWithdrawalQueuedEvent.InputTuple,
      ClaimableWithdrawalQueuedEvent.OutputTuple,
      ClaimableWithdrawalQueuedEvent.OutputObject
    >;
    ClaimableWithdrawalQueued: TypedContractEvent<
      ClaimableWithdrawalQueuedEvent.InputTuple,
      ClaimableWithdrawalQueuedEvent.OutputTuple,
      ClaimableWithdrawalQueuedEvent.OutputObject
    >;

    "DepositsProcessed(bytes32)": TypedContractEvent<
      DepositsProcessedEvent.InputTuple,
      DepositsProcessedEvent.OutputTuple,
      DepositsProcessedEvent.OutputObject
    >;
    DepositsProcessed: TypedContractEvent<
      DepositsProcessedEvent.InputTuple,
      DepositsProcessedEvent.OutputTuple,
      DepositsProcessedEvent.OutputObject
    >;

    "DirectWithdrawalQueued(uint256,tuple)": TypedContractEvent<
      DirectWithdrawalQueuedEvent.InputTuple,
      DirectWithdrawalQueuedEvent.OutputTuple,
      DirectWithdrawalQueuedEvent.OutputObject
    >;
    DirectWithdrawalQueued: TypedContractEvent<
      DirectWithdrawalQueuedEvent.InputTuple,
      DirectWithdrawalQueuedEvent.OutputTuple,
      DirectWithdrawalQueuedEvent.OutputObject
    >;

    "Initialized(uint64)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "PubKeysPosted(uint256,uint256[])": TypedContractEvent<
      PubKeysPostedEvent.InputTuple,
      PubKeysPostedEvent.OutputTuple,
      PubKeysPostedEvent.OutputObject
    >;
    PubKeysPosted: TypedContractEvent<
      PubKeysPostedEvent.InputTuple,
      PubKeysPostedEvent.OutputTuple,
      PubKeysPostedEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
  };
}
