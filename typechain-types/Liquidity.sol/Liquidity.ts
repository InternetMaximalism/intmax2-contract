/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface LiquidityInterface extends utils.Interface {
  functions: {
    "_depositCounter()": FunctionFragment;
    "_greeting()": FunctionFragment;
    "_rollupContract()": FunctionFragment;
    "_scrollMessenger()": FunctionFragment;
    "deposit(bytes32,uint32,uint256)": FunctionFragment;
    "deposits(uint256)": FunctionFragment;
    "updateRollupContract(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_depositCounter"
      | "_greeting"
      | "_rollupContract"
      | "_scrollMessenger"
      | "deposit"
      | "deposits"
      | "updateRollupContract"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_depositCounter",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "_greeting", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_rollupContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_scrollMessenger",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deposits",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateRollupContract",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "_depositCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_greeting", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_rollupContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_scrollMessenger",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposits", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateRollupContract",
    data: BytesLike
  ): Result;

  events: {
    "Deposited(bytes32,uint64,address,uint32,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposited"): EventFragment;
}

export interface DepositedEventObject {
  recipient: string;
  depositIndex: BigNumber;
  sender: string;
  tokenIndex: number;
  amount: BigNumber;
}
export type DepositedEvent = TypedEvent<
  [string, BigNumber, string, number, BigNumber],
  DepositedEventObject
>;

export type DepositedEventFilter = TypedEventFilter<DepositedEvent>;

export interface Liquidity extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LiquidityInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _depositCounter(overrides?: CallOverrides): Promise<[BigNumber]>;

    _greeting(overrides?: CallOverrides): Promise<[string]>;

    _rollupContract(overrides?: CallOverrides): Promise<[string]>;

    _scrollMessenger(overrides?: CallOverrides): Promise<[string]>;

    deposit(
      recipient: PromiseOrValue<BytesLike>,
      tokenIndex: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deposits(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, number, BigNumber] & {
        recipient: string;
        tokenIndex: number;
        amount: BigNumber;
      }
    >;

    updateRollupContract(
      rollupContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  _depositCounter(overrides?: CallOverrides): Promise<BigNumber>;

  _greeting(overrides?: CallOverrides): Promise<string>;

  _rollupContract(overrides?: CallOverrides): Promise<string>;

  _scrollMessenger(overrides?: CallOverrides): Promise<string>;

  deposit(
    recipient: PromiseOrValue<BytesLike>,
    tokenIndex: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deposits(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, number, BigNumber] & {
      recipient: string;
      tokenIndex: number;
      amount: BigNumber;
    }
  >;

  updateRollupContract(
    rollupContract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _depositCounter(overrides?: CallOverrides): Promise<BigNumber>;

    _greeting(overrides?: CallOverrides): Promise<string>;

    _rollupContract(overrides?: CallOverrides): Promise<string>;

    _scrollMessenger(overrides?: CallOverrides): Promise<string>;

    deposit(
      recipient: PromiseOrValue<BytesLike>,
      tokenIndex: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    deposits(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, number, BigNumber] & {
        recipient: string;
        tokenIndex: number;
        amount: BigNumber;
      }
    >;

    updateRollupContract(
      rollupContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Deposited(bytes32,uint64,address,uint32,uint256)"(
      recipient?: PromiseOrValue<BytesLike> | null,
      depositIndex?: null,
      sender?: null,
      tokenIndex?: null,
      amount?: null
    ): DepositedEventFilter;
    Deposited(
      recipient?: PromiseOrValue<BytesLike> | null,
      depositIndex?: null,
      sender?: null,
      tokenIndex?: null,
      amount?: null
    ): DepositedEventFilter;
  };

  estimateGas: {
    _depositCounter(overrides?: CallOverrides): Promise<BigNumber>;

    _greeting(overrides?: CallOverrides): Promise<BigNumber>;

    _rollupContract(overrides?: CallOverrides): Promise<BigNumber>;

    _scrollMessenger(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      recipient: PromiseOrValue<BytesLike>,
      tokenIndex: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deposits(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateRollupContract(
      rollupContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _depositCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _greeting(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _rollupContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _scrollMessenger(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      recipient: PromiseOrValue<BytesLike>,
      tokenIndex: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deposits(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateRollupContract(
      rollupContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
