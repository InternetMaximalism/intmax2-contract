/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace IRollup {
  export type BlockBuilderInfoStruct = {
    blockBuilderUrl: PromiseOrValue<string>;
    stakeAmount: PromiseOrValue<BigNumberish>;
    lastBlockTime: PromiseOrValue<BigNumberish>;
  };

  export type BlockBuilderInfoStructOutput = [string, BigNumber, BigNumber] & {
    blockBuilderUrl: string;
    stakeAmount: BigNumber;
    lastBlockTime: BigNumber;
  };
}

export interface RollupInterface extends utils.Interface {
  functions: {
    "CHALLENGE_DURATION()": FunctionFragment;
    "MIN_STAKE_AMOUNT()": FunctionFragment;
    "_depositRoot()": FunctionFragment;
    "_liquidityContract()": FunctionFragment;
    "_scrollMessenger()": FunctionFragment;
    "getBlockBuilder(address)": FunctionFragment;
    "getBlockHash(uint32)": FunctionFragment;
    "postBlock()": FunctionFragment;
    "stopBlockBuilder()": FunctionFragment;
    "updateBlockBuilder(string)": FunctionFragment;
    "updateDepositRoot(bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "CHALLENGE_DURATION"
      | "MIN_STAKE_AMOUNT"
      | "_depositRoot"
      | "_liquidityContract"
      | "_scrollMessenger"
      | "getBlockBuilder"
      | "getBlockHash"
      | "postBlock"
      | "stopBlockBuilder"
      | "updateBlockBuilder"
      | "updateDepositRoot"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "CHALLENGE_DURATION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_STAKE_AMOUNT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_depositRoot",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_liquidityContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_scrollMessenger",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBlockBuilder",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBlockHash",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "postBlock", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "stopBlockBuilder",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateBlockBuilder",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDepositRoot",
    values: [PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "CHALLENGE_DURATION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_STAKE_AMOUNT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_depositRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_liquidityContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_scrollMessenger",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBlockBuilder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBlockHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "postBlock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stopBlockBuilder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateBlockBuilder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDepositRoot",
    data: BytesLike
  ): Result;

  events: {
    "BlockBuilderUpdated(address,string,uint256)": EventFragment;
    "BlockPosted(bytes32,address,uint256,bytes32,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BlockBuilderUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BlockPosted"): EventFragment;
}

export interface BlockBuilderUpdatedEventObject {
  blockBuilder: string;
  url: string;
  stakeAmount: BigNumber;
}
export type BlockBuilderUpdatedEvent = TypedEvent<
  [string, string, BigNumber],
  BlockBuilderUpdatedEventObject
>;

export type BlockBuilderUpdatedEventFilter =
  TypedEventFilter<BlockBuilderUpdatedEvent>;

export interface BlockPostedEventObject {
  prevBlockHash: string;
  blockBuilder: string;
  blockNumber: BigNumber;
  blockContentHash: string;
  depositRoot: string;
}
export type BlockPostedEvent = TypedEvent<
  [string, string, BigNumber, string, string],
  BlockPostedEventObject
>;

export type BlockPostedEventFilter = TypedEventFilter<BlockPostedEvent>;

export interface Rollup extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RollupInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    CHALLENGE_DURATION(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_STAKE_AMOUNT(overrides?: CallOverrides): Promise<[BigNumber]>;

    _depositRoot(overrides?: CallOverrides): Promise<[string]>;

    _liquidityContract(overrides?: CallOverrides): Promise<[string]>;

    _scrollMessenger(overrides?: CallOverrides): Promise<[string]>;

    getBlockBuilder(
      blockBuilder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[IRollup.BlockBuilderInfoStructOutput]>;

    getBlockHash(
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    postBlock(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stopBlockBuilder(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateBlockBuilder(
      url: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateDepositRoot(
      depositRoot: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  CHALLENGE_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_STAKE_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

  _depositRoot(overrides?: CallOverrides): Promise<string>;

  _liquidityContract(overrides?: CallOverrides): Promise<string>;

  _scrollMessenger(overrides?: CallOverrides): Promise<string>;

  getBlockBuilder(
    blockBuilder: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<IRollup.BlockBuilderInfoStructOutput>;

  getBlockHash(
    blockNumber: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  postBlock(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stopBlockBuilder(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateBlockBuilder(
    url: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateDepositRoot(
    depositRoot: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    CHALLENGE_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_STAKE_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    _depositRoot(overrides?: CallOverrides): Promise<string>;

    _liquidityContract(overrides?: CallOverrides): Promise<string>;

    _scrollMessenger(overrides?: CallOverrides): Promise<string>;

    getBlockBuilder(
      blockBuilder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<IRollup.BlockBuilderInfoStructOutput>;

    getBlockHash(
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    postBlock(overrides?: CallOverrides): Promise<void>;

    stopBlockBuilder(overrides?: CallOverrides): Promise<void>;

    updateBlockBuilder(
      url: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateDepositRoot(
      depositRoot: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "BlockBuilderUpdated(address,string,uint256)"(
      blockBuilder?: PromiseOrValue<string> | null,
      url?: null,
      stakeAmount?: null
    ): BlockBuilderUpdatedEventFilter;
    BlockBuilderUpdated(
      blockBuilder?: PromiseOrValue<string> | null,
      url?: null,
      stakeAmount?: null
    ): BlockBuilderUpdatedEventFilter;

    "BlockPosted(bytes32,address,uint256,bytes32,bytes32)"(
      prevBlockHash?: PromiseOrValue<BytesLike> | null,
      blockBuilder?: PromiseOrValue<string> | null,
      blockNumber?: null,
      blockContentHash?: null,
      depositRoot?: null
    ): BlockPostedEventFilter;
    BlockPosted(
      prevBlockHash?: PromiseOrValue<BytesLike> | null,
      blockBuilder?: PromiseOrValue<string> | null,
      blockNumber?: null,
      blockContentHash?: null,
      depositRoot?: null
    ): BlockPostedEventFilter;
  };

  estimateGas: {
    CHALLENGE_DURATION(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_STAKE_AMOUNT(overrides?: CallOverrides): Promise<BigNumber>;

    _depositRoot(overrides?: CallOverrides): Promise<BigNumber>;

    _liquidityContract(overrides?: CallOverrides): Promise<BigNumber>;

    _scrollMessenger(overrides?: CallOverrides): Promise<BigNumber>;

    getBlockBuilder(
      blockBuilder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getBlockHash(
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    postBlock(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stopBlockBuilder(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateBlockBuilder(
      url: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateDepositRoot(
      depositRoot: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CHALLENGE_DURATION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MIN_STAKE_AMOUNT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _depositRoot(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _liquidityContract(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _scrollMessenger(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBlockBuilder(
      blockBuilder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBlockHash(
      blockNumber: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    postBlock(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stopBlockBuilder(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateBlockBuilder(
      url: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateDepositRoot(
      depositRoot: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
