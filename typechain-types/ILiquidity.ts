/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace ILiquidity {
  export type DepositDataStruct = {
    recipient: PromiseOrValue<BytesLike>;
    amount: PromiseOrValue<BigNumberish>;
    tokenIndex: PromiseOrValue<BigNumberish>;
    isRejected: PromiseOrValue<boolean>;
    requestedAt: PromiseOrValue<BigNumberish>;
  };

  export type DepositDataStructOutput = [
    string,
    BigNumber,
    number,
    boolean,
    BigNumber
  ] & {
    recipient: string;
    amount: BigNumber;
    tokenIndex: number;
    isRejected: boolean;
    requestedAt: BigNumber;
  };
}

export interface ILiquidityInterface extends utils.Interface {
  functions: {
    "depositERC20(bytes32,address,uint256)": FunctionFragment;
    "depositERC721(bytes32,address,uint256,uint256)": FunctionFragment;
    "depositETH(bytes32)": FunctionFragment;
    "getDeposit(uint64)": FunctionFragment;
    "getDepositCounter()": FunctionFragment;
    "getLastProcessedDepositIndex()": FunctionFragment;
    "getLastSeenDepositIndex()": FunctionFragment;
    "rejectDeposits(uint256,uint256[])": FunctionFragment;
    "submitDepositRoot()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "depositERC20"
      | "depositERC721"
      | "depositETH"
      | "getDeposit"
      | "getDepositCounter"
      | "getLastProcessedDepositIndex"
      | "getLastSeenDepositIndex"
      | "rejectDeposits"
      | "submitDepositRoot"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "depositERC20",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositERC721",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositETH",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDeposit",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDepositCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLastProcessedDepositIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLastSeenDepositIndex",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rejectDeposits",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "submitDepositRoot",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "depositERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositERC721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "depositETH", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getDeposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getDepositCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastProcessedDepositIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLastSeenDepositIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rejectDeposits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitDepositRoot",
    data: BytesLike
  ): Result;

  events: {
    "Deposited(bytes32,uint64,address,uint32,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposited"): EventFragment;
}

export interface DepositedEventObject {
  recipient: string;
  depositIndex: BigNumber;
  sender: string;
  tokenIndex: number;
  amount: BigNumber;
}
export type DepositedEvent = TypedEvent<
  [string, BigNumber, string, number, BigNumber],
  DepositedEventObject
>;

export type DepositedEventFilter = TypedEventFilter<DepositedEvent>;

export interface ILiquidity extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ILiquidityInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    depositERC20(
      recipient: PromiseOrValue<BytesLike>,
      tokenAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositERC721(
      recipient: PromiseOrValue<BytesLike>,
      tokenAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositETH(
      recipient: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getDeposit(
      depositIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[ILiquidity.DepositDataStructOutput]>;

    getDepositCounter(overrides?: CallOverrides): Promise<[BigNumber]>;

    getLastProcessedDepositIndex(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getLastSeenDepositIndex(overrides?: CallOverrides): Promise<[BigNumber]>;

    rejectDeposits(
      lastSeenDepositIndex: PromiseOrValue<BigNumberish>,
      rejectedIndices: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    submitDepositRoot(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  depositERC20(
    recipient: PromiseOrValue<BytesLike>,
    tokenAddress: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositERC721(
    recipient: PromiseOrValue<BytesLike>,
    tokenAddress: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositETH(
    recipient: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getDeposit(
    depositIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<ILiquidity.DepositDataStructOutput>;

  getDepositCounter(overrides?: CallOverrides): Promise<BigNumber>;

  getLastProcessedDepositIndex(overrides?: CallOverrides): Promise<BigNumber>;

  getLastSeenDepositIndex(overrides?: CallOverrides): Promise<BigNumber>;

  rejectDeposits(
    lastSeenDepositIndex: PromiseOrValue<BigNumberish>,
    rejectedIndices: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  submitDepositRoot(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    depositERC20(
      recipient: PromiseOrValue<BytesLike>,
      tokenAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    depositERC721(
      recipient: PromiseOrValue<BytesLike>,
      tokenAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    depositETH(
      recipient: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    getDeposit(
      depositIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<ILiquidity.DepositDataStructOutput>;

    getDepositCounter(overrides?: CallOverrides): Promise<BigNumber>;

    getLastProcessedDepositIndex(overrides?: CallOverrides): Promise<BigNumber>;

    getLastSeenDepositIndex(overrides?: CallOverrides): Promise<BigNumber>;

    rejectDeposits(
      lastSeenDepositIndex: PromiseOrValue<BigNumberish>,
      rejectedIndices: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    submitDepositRoot(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Deposited(bytes32,uint64,address,uint32,uint256)"(
      recipient?: PromiseOrValue<BytesLike> | null,
      depositIndex?: PromiseOrValue<BigNumberish> | null,
      sender?: null,
      tokenIndex?: null,
      amount?: null
    ): DepositedEventFilter;
    Deposited(
      recipient?: PromiseOrValue<BytesLike> | null,
      depositIndex?: PromiseOrValue<BigNumberish> | null,
      sender?: null,
      tokenIndex?: null,
      amount?: null
    ): DepositedEventFilter;
  };

  estimateGas: {
    depositERC20(
      recipient: PromiseOrValue<BytesLike>,
      tokenAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositERC721(
      recipient: PromiseOrValue<BytesLike>,
      tokenAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositETH(
      recipient: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getDeposit(
      depositIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDepositCounter(overrides?: CallOverrides): Promise<BigNumber>;

    getLastProcessedDepositIndex(overrides?: CallOverrides): Promise<BigNumber>;

    getLastSeenDepositIndex(overrides?: CallOverrides): Promise<BigNumber>;

    rejectDeposits(
      lastSeenDepositIndex: PromiseOrValue<BigNumberish>,
      rejectedIndices: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    submitDepositRoot(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    depositERC20(
      recipient: PromiseOrValue<BytesLike>,
      tokenAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositERC721(
      recipient: PromiseOrValue<BytesLike>,
      tokenAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositETH(
      recipient: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getDeposit(
      depositIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDepositCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLastProcessedDepositIndex(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLastSeenDepositIndex(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rejectDeposits(
      lastSeenDepositIndex: PromiseOrValue<BigNumberish>,
      rejectedIndices: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    submitDepositRoot(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
